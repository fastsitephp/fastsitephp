{
    "name": "FastSitePHP\\Web\\Response",
    "short_name": "Web\\Response",
    "link": "Web_Response",
    "namespace": "FastSitePHP\\Web",
    "description": "The Response Class represents an HTTP response and can be used to build and send the response.",
    "attributes": [],
    "properties": [],
    "methods": [
        {
            "definition": "__construct(Application $app = null)",
            "target": "fn___construct",
            "isStatic": false,
            "isGetterSetter": false,
            "description": "Class Constructor\n\nThe FastSitePHP Application can be passed as an optional parameter and when used the Status Code and any Response Headers defined from the Application Object will be assigned to the Response Object.",
            "attributes": [
                "@param Application|null $app"
            ],
            "returnType": null,
            "links": []
        },
        {
            "definition": "header($name, $value = null)",
            "target": "fn_header",
            "isStatic": false,
            "isGetterSetter": true,
            "description": "Define an HTTP Header to be sent with the Response. Additionally previously defined Header fields can be read and cleared using this function. To set a Header field specify both $name and $value parameters. To read the value of a Header field specify only the $name parameter; if the value has been defined it will be returned otherwise if it has not been defined then null will be returned. To clear a Header field pass an empty string '' for the $value parameter. If setting or clearing a Header field then the Response Object will be returned so it can be called as a chainable method.\n\nThe Class [\\FastSitePHP\\Application] also has this function defined. The difference is that Application version is used for basic responses and headers are not validated.\n\nExamples:\n    Set the Response Header 'Content-Type' to 'text\/plain'\n    $res->header('Content-Type', 'text\/plain')\n\n    Get the Response Header 'Content-Type' that has been set.\n    If no value has been set then null will be returned.\n    $value = $res->header('Content-Type')\n\n    Clear the Response Header 'Content-Type' that has been set\n    $res->header('Content-Type', '')",
            "attributes": [
                "@param string $name",
                "@param mixed $value",
                "@return $this|mixed|null",
                "@throws \\Exception"
            ],
            "returnType": "$this | mixed | null",
            "links": []
        },
        {
            "definition": "headers()",
            "target": "fn_headers",
            "isStatic": false,
            "isGetterSetter": false,
            "description": "Return an array of Headers fields defined from the header() function that will be or have been sent with the HTTP Response.",
            "attributes": [
                "@return array"
            ],
            "returnType": "array",
            "links": []
        },
        {
            "definition": "statusCode($new_value = null)",
            "target": "fn_statusCode",
            "isStatic": false,
            "isGetterSetter": true,
            "description": "Get or set the response status code by number (for example 200 for 'OK' or 404 for 'Not Found'). By default the PHP will set a status of 200 so setting a status code is usually only needed for other status codes other than 200. This gets sent when the response is sent to the client. If this function is called without a status code passed as a parameter then it will return the current status code otherwise when setting a status code it will return the Response object so it can be used in chainable methods.",
            "attributes": [
                "@link https:\/\/en.wikipedia.org\/wiki\/List_of_HTTP_status_codes",
                "@param int|null $new_value (default: null)",
                "@return null|int|$this",
                "@throws \\Exception"
            ],
            "returnType": "null | int | $this",
            "links": [
                "https:\/\/en.wikipedia.org\/wiki\/List_of_HTTP_status_codes"
            ]
        },
        {
            "definition": "contentType($type = null, $option = null)",
            "target": "fn_contentType",
            "isStatic": false,
            "isGetterSetter": true,
            "description": "Get or set the response content type header. This function is designed for developer ease of use so rather than having to define the full header such as 'Content-Type: application\/json' the type 'json' can simply be used. The header is sent in the response from the function send(). This function supports the most common text content types used in web sites and web applications. For a full list of content media types see the defined standards from Internet Assigned Numbers Authority (IANA) in the reference link below.\n\nIf this function is called without a type passed as a a parameter then it will return the current content type otherwise it will return the Response object so it can be used in chainable methods.\n\nParameters: [$type] If specified will be one of 'html|json|jsonp|text|css|javascript|xml|graphql',\n    any type from function [Response->fileTypeToMimeType()],\n    or the actual content type for example 'text\/html'. [$option] If $type is in 'html|css|javascript|text' then $option can be a string\n    to specify the charset (e.g.: 'UTF-8') otherwise if 'jsonp' is the content type\n    then $option can be a string or an array of query string parameters.\n    By default if $option is null and the type is 'html' then 'UTF-8' is used\n    as the charset and if the type is 'jsonp' and then the query string\n    parameters 'callback' and 'jsonp' are used as the default.",
            "attributes": [
                "@link http:\/\/www.iana.org\/assignments\/media-types\/media-types.xhtml",
                "@param string|null $type",
                "@param string|null $option",
                "@return $this|mixed|null",
                "@throws \\Exception"
            ],
            "returnType": "$this | mixed | null",
            "links": [
                "http:\/\/www.iana.org\/assignments\/media-types\/media-types.xhtml"
            ]
        },
        {
            "definition": "jsonpQueryString($value = null)",
            "target": "fn_jsonpQueryString",
            "isStatic": false,
            "isGetterSetter": true,
            "description": "Gets or sets the value of the Query String Parameters that would be used for a JSONP Request (JSON with Padding). This function would not commonly be used and instead simply calling contentType('jsonp') would be enough for most apps. The only time this function would likely be used is if the contentType() was manually set with a specific JavaScript character set then this function could be used to set the Query String Parameters.",
            "attributes": [
                "@param array|null|string $value",
                "@return $this|array|null|string",
                "@throws \\Exception"
            ],
            "returnType": "$this | array | null | string",
            "links": []
        },
        {
            "definition": "content($content = null)",
            "target": "fn_content",
            "isStatic": false,
            "isGetterSetter": true,
            "description": "Get or set content that will be sent to the client. When a Route returns a Response Object the function [send()] will be called which sends the actual Response. To get the content of the response object call this function without any parameters and to specify content specify the [$content] parameter. If the response type [define from contentType()] is JSON or JSONP then the [$content] can be an array or object otherwise it should be a string. When setting a content value the Response Object Instance is returned.\n\nExamples:\n\n    $app->get('\/html', function() {\n        $res = new \\FastSitePHP\\Web\\Response();\n        return $res->content('<h1>FastSitePHP<\/h1>');\n    });\n\n    $app->get('\/json', function() {\n        $res = new \\FastSitePHP\\Web\\Response();\n        return $res\n            ->contentType('json')\n            ->content(array('Name' => 'FastSitePHP'));\n    });",
            "attributes": [
                "@param null|mixed $content   Content that will be sent to the client",
                "@return $this|mixed"
            ],
            "returnType": "$this | mixed",
            "links": []
        },
        {
            "definition": "json($content)",
            "target": "fn_json",
            "isStatic": false,
            "isGetterSetter": false,
            "description": "Prepare the Response Object for a JSON Response with Content. This is a helper function to provide a shorter syntax for the following:\n\n    $res->contentType('json')->content($object);\n\nThis is a setter function only and returns the Response Object. For practical usage a basic JSON response can be returned from the Application Object by simply returning an array to the route. In most cases this would be used along with other Response fields, for example:\n\n    $res->header('API-Key', '123')->etag('hash:md5')->json($data);",
            "attributes": [
                "@param object|array $content",
                "@return $this",
                "@throws \\Exception"
            ],
            "returnType": "$this",
            "links": []
        },
        {
            "definition": "jsonOptions($new_value = null)",
            "target": "fn_jsonOptions",
            "isStatic": false,
            "isGetterSetter": true,
            "description": "Get or set options for [json_encode()] when a JSON Response is returned. Defaults to [JSON_UNESCAPED_UNICODE] when using PHP 5.4 or later.\n\nExample:\n    $res->jsonOptions(JSON_UNESCAPED_UNICODE | JSON_PRETTY_PRINT);",
            "attributes": [
                "@param null|int $new_value",
                "@return int|$this"
            ],
            "returnType": "int | $this",
            "links": []
        },
        {
            "definition": "etag($value = null, $type = 'weak')",
            "target": "fn_etag",
            "isStatic": false,
            "isGetterSetter": true,
            "description": "Get or set a value for the 'ETag' Response Header which is used to specify rules for HTTP Caching. ETag is short for Entity Tag and is typically a hash value (e.g.: md5 value of the content). When the function sendResponse() in this class gets called the ETag value is compared to the Request Header 'If-None-Match' and based on matching rules either a 200 'Ok' or 304 'Not Modified' response is returned for most webpages. There are two types of ETags validators: 'strong' and 'weak'.  A strong ETag is used to indicate that the contents of two requested resources including header fields at a URL (e.g.: webpages) are byte-for-byte identical. A weak ETag indicates that two requested resources are semantically equivalent. Strong ETags are not suitable for gzipped content because with compression turned on the response is not byte-for-byte identical. Depending upon the web server version if using strong ETags with gzipped content Nginx will remove them from the Response or convert them to weak ETags and Apache using mod_deflate will add a suffix which makes it unusable to most server side frameworks. Because of this weak ETags are used as the default option. If your site is using ETags then the Unit Testing Pages and the Samples Cache Test Section can be used to make sure that caching for your site is working as expected.",
            "attributes": [
                "@link https:\/\/en.wikipedia.org\/wiki\/HTTP_ETag",
                "@param null|string|\\Closure $value   If the format 'hash:{algorithim}' is used (example: 'hash:md5') then FastSitePHP will calculate the hash from the content when the response is sent.",
                "@param string $type  'weak' or 'strong' (defaults to 'weak')",
                "@return $this|mixed|null",
                "@throws \\Exception"
            ],
            "returnType": "$this | mixed | null",
            "links": [
                "https:\/\/en.wikipedia.org\/wiki\/HTTP_ETag"
            ]
        },
        {
            "definition": "lastModified($last_modified_time = null)",
            "target": "fn_lastModified",
            "isStatic": false,
            "isGetterSetter": true,
            "description": "Get or set a value for the 'Last-Modified' Response Header which is used to specify rules for HTTP Caching. Additionally when sendResponse() gets called the 'Last-Modified' value is compared to the Request Header 'If-Modified-Since' and based on matching rules either a 200 'Ok' or 304 'Not Modified' response is returned. If setting the value then the parameter value $ last_modified_time needs to be defined as an int to represent a Unix Timestamp or a valid string format for the php function strtotime().",
            "attributes": [
                "@param null|string|int $last_modified_time",
                "@return $this|mixed|null"
            ],
            "returnType": "$this | mixed | null",
            "links": []
        },
        {
            "definition": "cacheControl($value = null)",
            "target": "fn_cacheControl",
            "isStatic": false,
            "isGetterSetter": true,
            "description": "Get or set a value for the 'Cache-Control' Response Header which is used to specify rules for HTTP Caching. When setting the header value this function validates that it is in a correct format for defined HTTP 1.1 directive options and values. Per HTTP 1.1 Specs user defined fields are allowed however they are not commonly used so this function validates only for standards fields. This function is handled this way so that if there is a typo it can be caught. If the a custom 'Cache-Control' field name is needed then it can be added with the header() function instead.",
            "attributes": [
                "@link http:\/\/www.w3.org\/Protocols\/rfc2616\/rfc2616-sec14.html#sec14.9",
                "@param null|string $value",
                "@return $this|mixed|null",
                "@throws \\Exception"
            ],
            "returnType": "$this | mixed | null",
            "links": [
                "http:\/\/www.w3.org\/Protocols\/rfc2616\/rfc2616-sec14.html#sec14.9"
            ]
        },
        {
            "definition": "expires($expires_time = null)",
            "target": "fn_expires",
            "isStatic": false,
            "isGetterSetter": true,
            "description": "Get or set a value for the 'Expires' Response Header which is used to specify rules for HTTP Caching. If setting the value then the parameter value $expires_time needs to be defined as an int to represent a Unix Timestamp, string values of '0' or '-1' for to prevent caching, or a valid string format for the php function strtotime(). When setting the header value through this function the largest date allowed is one year from today. To set the header value to a date greater than one year from today use the header() function instead.",
            "attributes": [
                "@link http:\/\/www.w3.org\/Protocols\/rfc2616\/rfc2616-sec14.html#sec14.21",
                "@param null|string|int $expires_time",
                "@return $this|mixed|null",
                "@throws \\Exception"
            ],
            "returnType": "$this | mixed | null",
            "links": [
                "http:\/\/www.w3.org\/Protocols\/rfc2616\/rfc2616-sec14.html#sec14.21"
            ]
        },
        {
            "definition": "vary($value = null)",
            "target": "fn_vary",
            "isStatic": false,
            "isGetterSetter": true,
            "description": "Get or set a value for the 'Vary' Response Header which is used to specify rules for HTTP Caching and also to provide content hints to Google and other Search Engines. When setting the header value this function validates that the options specified are valid options; this includes all server driven content negotiation headers and several commonly used request headers. It's possible that other options could be used and would be valid however this function validates for common options so that if there is a typo it can be caught and to catch logic errors with the parameters. The valid parameters that can be used with this function are ['Accept', 'Accept-Charset', 'Accept-Encoding', 'Accept-Language', 'User-Agent', 'Origin', 'Cookie', and 'Referer']. If the a custom 'Vary' option is needed then it can be added with the header() function instead. Additionally testing should be performed when using this function because depending upon how the actual web server is configured this function could overwrite the web server value or the web server could overwrite the value set from this function.",
            "attributes": [
                "@link http:\/\/www.w3.org\/Protocols\/rfc2616\/rfc2616-sec14.html#sec14.44",
                "@link https:\/\/developers.google.com\/search\/mobile-sites\/mobile-seo\/dynamic-serving",
                "@link http:\/\/httpd.apache.org\/docs\/2.2\/content-negotiation.html",
                "@link https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/HTTP\/Content_negotiation",
                "@link https:\/\/www.fastly.com\/blog\/best-practices-for-using-the-vary-header",
                "@link https:\/\/www.youtube.com\/watch?v=va6qtaiZRHg",
                "@link https:\/\/support.microsoft.com\/en-us\/kb\/2877816",
                "@param null|string $value",
                "@return $this|mixed|null",
                "@throws \\Exception"
            ],
            "returnType": "$this | mixed | null",
            "links": [
                "http:\/\/www.w3.org\/Protocols\/rfc2616\/rfc2616-sec14.html#sec14.44",
                "https:\/\/developers.google.com\/search\/mobile-sites\/mobile-seo\/dynamic-serving",
                "http:\/\/httpd.apache.org\/docs\/2.2\/content-negotiation.html",
                "https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/HTTP\/Content_negotiation",
                "https:\/\/www.fastly.com\/blog\/best-practices-for-using-the-vary-header",
                "https:\/\/www.youtube.com\/watch?v=va6qtaiZRHg",
                "https:\/\/support.microsoft.com\/en-us\/kb\/2877816"
            ]
        },
        {
            "definition": "noCache()",
            "target": "fn_noCache",
            "isStatic": false,
            "isGetterSetter": true,
            "description": "Set Response Headers that tell the browser or client to not cache the response.\n\nThis function defines the following response headers:\n    Cache-Control: no-cache, no-store, must-revalidate\n    Pragma: no-cache\n    Expires: -1\n\nFor most clients and all modern browsers 'Cache-Control' will take precedence over 'Expires' when both tags exist. The 'Expires' header per HTTP Specs must be defined as an HTTP-Date value, and when an invalid value such as '0' is used then the client should treat the content as already expired, however in reality certain older versions of Internet Explorer may end up caching the response if '0' is used so '-1' is used for the 'Expires' header. At the time of writing both Google and Microsoft use 'Expires: -1' for their homepages. The header 'Pragma' is for old HTTP 1.0 clients that do not support either 'Cache-Control' or 'Expires'.\n\nThis function exists in both [FastSitePHP\\Application] and [FastSitePHP\\Web\\Response] classes; calling the function from the Application object specifies the headers only when a route returns a basic response and calling the function from the Response object specifies the headers only when the route returns a Response object.",
            "attributes": [
                "@link http:\/\/www.w3.org\/Protocols\/rfc2616\/rfc2616-sec14.html#sec14.21",
                "@link http:\/\/blogs.msdn.com\/b\/ieinternals\/archive\/2012\/01\/31\/avoid-using-meta-to-specify-expires-or-pragma-in-html-markup.aspx",
                "@return $this|mixed"
            ],
            "returnType": "$this | mixed",
            "links": [
                "http:\/\/www.w3.org\/Protocols\/rfc2616\/rfc2616-sec14.html#sec14.21",
                "http:\/\/blogs.msdn.com\/b\/ieinternals\/archive\/2012\/01\/31\/avoid-using-meta-to-specify-expires-or-pragma-in-html-markup.aspx"
            ]
        },
        {
            "definition": "cors(Application $app = null)",
            "target": "fn_cors",
            "isStatic": false,
            "isGetterSetter": true,
            "description": "Get or set a values for Cross-Origin Resource Sharing (CORS) Response Headers. For security reasons browsers will restrict content that is from a different domain when using JavaScript (for example: calling a Web Service from XMLHttpRequest). CORS is a web standard that allows for restricted resources to work on domains other than the domain where the resource is hosted.\n\nCORS Headers are sent with both the OPTIONS request method and the calling method. Because OPTIONS requests are required for certain response types CORS Headers are initially defined from the Application Object and then passed the Response Object.\n\nFor more on this topic refer to documentation from the cors() function in the Application Object.\n\nExample:\n    $app->cors(array(\n        'Access-Control-Allow-Origin' => '*',\n        'Access-Control-Allow-Headers' => 'Origin, X-Requested-With, Content-Type, Authorization',\n    ));\n    $res = new \\FastSitePHP\\Web\\Response();\n    $res->cors($app);",
            "attributes": [
                "@param Application|null $app",
                "@return $this|array|null"
            ],
            "returnType": "$this | array | null",
            "links": []
        },
        {
            "definition": "cookie($name, $value = '', $expire = 0, $path = '', $domain = '', $secure = false, $httponly = false)",
            "target": "fn_cookie",
            "isStatic": false,
            "isGetterSetter": false,
            "description": "Define a cookie to be sent with the response along with the response headers. Internally this calls the PHP function setcookie() from the private function sendResponse(). To delete a cookie use the function [clearCookie()]. To read cookies use the [cookie()] function of the [FastSitePHP\\Web\\Request] Object or use the PHP superglobal array $_COOKIE.",
            "attributes": [
                "@link http:\/\/php.net\/manual\/en\/function.setcookie.php",
                "@link http:\/\/php.net\/manual\/en\/features.cookies.php",
                "@link http:\/\/php.net\/manual\/en\/reserved.variables.cookies.php",
                "@param $name",
                "@param string $value",
                "@param int $expire    Defaults to 0 which makes the cookie expire at the end of the session",
                "@param string $path (default: '')",
                "@param string $domain (default: '')",
                "@param bool $secure (default: false)",
                "@param bool $httponly (default: false)",
                "@return $this"
            ],
            "returnType": "$this",
            "links": [
                "http:\/\/php.net\/manual\/en\/function.setcookie.php",
                "http:\/\/php.net\/manual\/en\/features.cookies.php",
                "http:\/\/php.net\/manual\/en\/reserved.variables.cookies.php"
            ]
        },
        {
            "definition": "clearCookie($name, $path = '', $domain = '', $secure = false, $httponly = false)",
            "target": "fn_clearCookie",
            "isStatic": false,
            "isGetterSetter": false,
            "description": "Send an empty value for a named cookie and expired time to tell the browser or client to clear the cookie.",
            "attributes": [
                "@param $name",
                "@param string $path (default: '')",
                "@param string $domain (default: '')",
                "@param bool $secure (default: false)",
                "@param bool $httponly (default: false)",
                "@return $this"
            ],
            "returnType": "$this",
            "links": []
        },
        {
            "definition": "signedCookie($name, $value = '', $expire_time = '+1 hour', $expire = 0, $path = '', $domain = '', $secure = false, $httponly = false)",
            "target": "fn_signedCookie",
            "isStatic": false,
            "isGetterSetter": false,
            "description": "Create a secure cookie that can be read by clients client but not tampered with. Cookies sent using this method need to be read with [Request->verifiedCookie()] to verify that they are not tampered with or expired. The default expiration time is 1 hour and it applies to the signed data and not the cookie itself.\n\nUsing this function requires the Application Config Value 'SIGNING_KEY'.\n\nSee also [encryptedCookie()] and [jwtCookie()].",
            "attributes": [
                "@param $name",
                "@param string $value",
                "@param string|int|null $expire_time - Expire time for the Signed Data and not the Cookie",
                "@param int $expire - Defaults to 0 which makes the cookie expire at the end of the session",
                "@param string $path (default: '')",
                "@param string $domain (default: '')",
                "@param bool $secure (default: false)",
                "@param bool $httponly (default: false)",
                "@return $this"
            ],
            "returnType": "$this",
            "links": []
        },
        {
            "definition": "jwtCookie($name, $value = '', $expire_time = '+1 hour', $expire = 0, $path = '', $domain = '', $secure = false, $httponly = false)",
            "target": "fn_jwtCookie",
            "isStatic": false,
            "isGetterSetter": false,
            "description": "Create a secure cookie with a JSON Web Token (JWT). Cookies sent using this method need to be read with [Request->jwtCookie()] to verify that they are not tampered with or expired. The default expiration time is 1 hour and it applies to the JWT and not the cookie itself.\n\nUsing this function requires the Application Config Value 'JWT_KEY'.\n\nSee also [encryptedCookie()] and [signedCookie()].",
            "attributes": [
                "@param $name",
                "@param string $value",
                "@param string|int|null $expire_time - Expire time for the Signed Data and not the Cookie",
                "@param int $expire - Defaults to 0 which makes the cookie expire at the end of the session",
                "@param string $path (default: '')",
                "@param string $domain (default: '')",
                "@param bool $secure (default: false)",
                "@param bool $httponly (default: false)",
                "@return $this"
            ],
            "returnType": "$this",
            "links": []
        },
        {
            "definition": "encryptedCookie($name, $value = '', $expire = 0, $path = '', $domain = '', $secure = false, $httponly = false)",
            "target": "fn_encryptedCookie",
            "isStatic": false,
            "isGetterSetter": false,
            "description": "Create a secure and secret cookie that cannot be read by clients. Cookies sent using this method need to be read with [Request->decryptedCookie()].\n\nUsing this function requires the Application Config Value 'ENCRYPTION_KEY'.\n\nSee also [signedCookie()] and [jwtCookie()].",
            "attributes": [
                "@param $name",
                "@param string $value",
                "@param int $expire    Defaults to 0 which makes the cookie expire at the end of the session",
                "@param string $path (default: '')",
                "@param string $domain (default: '')",
                "@param bool $secure (default: false)",
                "@param bool $httponly (default: false)",
                "@return $this"
            ],
            "returnType": "$this",
            "links": []
        },
        {
            "definition": "cookies()",
            "target": "fn_cookies",
            "isStatic": false,
            "isGetterSetter": false,
            "description": "Return the Array of Cookies that will be sent with the response.",
            "attributes": [
                "@return array"
            ],
            "returnType": "array",
            "links": []
        },
        {
            "definition": "fileTypeToMimeType($file_name)",
            "target": "fn_fileTypeToMimeType",
            "isStatic": false,
            "isGetterSetter": false,
            "description": "Return a Response Mime-type for a File extension for commonly used file formats in modern web apps and supported by popular browsers. For example 'file.txt' will return 'text\/plain' and 'file.mp4' will return 'video\/mp4'. The file path does not need to be a real file when calling this function. If a file type is not associated with a mime-type then 'application\/octet-stream' will be returned indicating that the type of file is a file download; this includes common file types such as Office Documents and Windows BMP Images. For a large list of known Mime-types refer to the reference links below.\n\nFile extensions that map to a Mime type with the function are:\n    Text: htm, html, txt, css, csv, md, markdown, jsx\n    Image: jpg, jpeg, png, gif, webp, svg, ico\n    Application: js, json, xml, pdf, woff, graphql\n    Video: mp4, webm, ogv, flv\n    Audio: mp3, weba, ogg, m4a, aac",
            "attributes": [
                "@link http:\/\/www.iana.org\/assignments\/media-types\/media-types.xhtml",
                "@link http:\/\/svn.apache.org\/repos\/asf\/httpd\/httpd\/trunk\/docs\/conf\/mime.types",
                "@link https:\/\/msdn.microsoft.com\/en-us\/library\/ms775147",
                "@link https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/HTTP\/Basics_of_HTTP\/MIME_types",
                "@param string $file_name",
                "@return string"
            ],
            "returnType": "string",
            "links": [
                "http:\/\/www.iana.org\/assignments\/media-types\/media-types.xhtml",
                "http:\/\/svn.apache.org\/repos\/asf\/httpd\/httpd\/trunk\/docs\/conf\/mime.types",
                "https:\/\/msdn.microsoft.com\/en-us\/library\/ms775147",
                "https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/HTTP\/Basics_of_HTTP\/MIME_types"
            ]
        },
        {
            "definition": "file($file_path = null, $content_type = null, $cache_type = null, $cache_control = null)",
            "target": "fn_file",
            "isStatic": false,
            "isGetterSetter": false,
            "description": "Specify a file for the response; the file specified will be streamed to the client and sent in a memory efficient manner so this function can be called on very large files with minimal performance impact for the server. The contents of the file are not modified when calling this function so it cannot be used to render templates. This function is ideal for sending file download responses and media files such as images or video.\n\nThis function provides several optional parameters to specify the response content type and caching headers:\n\n$content_type The content type to set for contentType() such as 'text', 'html' or 'download' to specify 'application\/octet-stream' and related headers for a file download. If not set then the mime type is determined from the file extension using the function fileTypeToMimeType().\n\n$cache_type Value to set for either ETag or Last-Modified headers which allow for Cached Responses of 304 'Not Modified'. Valid options are: 'etag:md5', 'etag:sha1', and 'last-modified'. All values are calculated from the file directly. When calculating Etag based on a hash be aware that the value will be calculated each time this function is called so in the case of large files that are 100's of megabytes or more in size it can delay the initial streamed response by as much as a few seconds. If very large files are used with this function and ETag is needed then an alternative solution such as saving a hash of the file and setting it through the etag() function can be used to improve performance.\n\n$cache_control Value for the 'Cache-Control' header which gets set from the function cacheControl().",
            "attributes": [
                "@param string|null $file_path",
                "@param string|null $content_type",
                "@param string|null $cache_type",
                "@param string|null $cache_control",
                "@return $this",
                "@throws \\Exception"
            ],
            "returnType": "$this",
            "links": []
        },
        {
            "definition": "redirect($url, $status_code = 302)",
            "target": "fn_redirect",
            "isStatic": false,
            "isGetterSetter": false,
            "description": "Specify a redirect URL for the response. By calling this function the response will redirect the user to another page or site by sending a status code of 3## for the response with the Location Header set to the new URL.\n\nThe redirect() function also exists in the main Application Object but can be used here instead if your site is designed to return a Response object for all routes.\n\nStatus Code can optionally be specified as the 2nd parameter. The default Status Code used is [302 'Found'] (Temporary Redirect). If Status Code [301 'Moved Permanently'] is used Web Browsers will typically cache the result so careful testing and consideration should be done if using a Status Code of 301. Other supported Status Codes are: [303 'See Other'], [307 'Temporary Redirect'], and [308 'Permanent Redirect'].\n\nExample:\n\n    \/\/ User makes this request\n    $app->get('\/page1', function() {\n        $res = new \\FastSitePHP\\Web\\Response();\n        return $res->redirect('page2');\n    });\n\n    \/\/ User will then see this URL and Response\n    $app->get('\/page2', function() {\n        return 'page2';\n    });",
            "attributes": [
                "@link http:\/\/en.wikipedia.org\/wiki\/URL_redirection",
                "@param string $url",
                "@param int $status_code  Default 302 for 'Found'",
                "@return $this",
                "@throws \\Exception"
            ],
            "returnType": "$this",
            "links": [
                "http:\/\/en.wikipedia.org\/wiki\/URL_redirection"
            ]
        },
        {
            "definition": "reset()",
            "target": "fn_reset",
            "isStatic": false,
            "isGetterSetter": false,
            "description": "Reset the Response object to its default state as if it were just created.",
            "attributes": [
                "@return $this"
            ],
            "returnType": "$this",
            "links": []
        },
        {
            "definition": "send()",
            "target": "fn_send",
            "isStatic": false,
            "isGetterSetter": false,
            "description": "Send the Response to the Client. This function gets called automatically if a route returns a response object and would normally not be manually called. This function handles sending Response Headers, Cookies, and Content.",
            "attributes": [
                "@throws \\Exception"
            ],
            "returnType": null,
            "links": []
        }
    ],
    "links": []
}