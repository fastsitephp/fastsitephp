{
    "name": "FastSitePHP\\Security\\Password",
    "short_name": "Security\\Password",
    "link": "Security_Password",
    "namespace": "FastSitePHP\\Security",
    "description": "Class to hash a user-suppied password with a secure algorithm [bcrypt or Argon2]. This class includes additional password functionality such as the abilty to generate secure random passwords.",
    "attributes": [],
    "properties": [],
    "methods": [
        {
            "definition": "__construct()",
            "target": "fn___construct",
            "isStatic": false,
            "isGetterSetter": false,
            "description": "Class Constructor\n\nIf using PHP 5.3 or 5.4 then functions [password_hash() and password_verify()] are created with polyfills using [https:\/\/github.com\/ircmaxell\/password_compat].\n\nIf using PHP 5.3 then functions [bin2hex()] and [hex2bin()] are polyfilled.",
            "attributes": [],
            "returnType": null,
            "links": []
        },
        {
            "definition": "hash($password)",
            "target": "fn_hash",
            "isStatic": false,
            "isGetterSetter": false,
            "description": "Create a secure password hash from a user password using using a strong one-way hashing algorithm (bcrypt or Argon2). In a secure application the password itself must not be saved or logged but instead the resulting hash gets saved to the database or storage provider.\n\nThe resulting text will be 60 characters in length for bcrypt which would need to be the minimum field size in a database. Argon2 will be longer, at least 95 characters and can be larger when using different options.\n\nUsing default options this is equivalent to calling built-in PHP function:\n    \\password_hash($password, PASSWORD_BCRYPT, ['cost' => 10])\n\nAnd for Argon2:\n    \\password_hash($password, PASSWORD_ARGON2I)",
            "attributes": [
                "@param string $password",
                "@return string"
            ],
            "returnType": "string",
            "links": []
        },
        {
            "definition": "verify($password, $hash)",
            "target": "fn_verify",
            "isStatic": false,
            "isGetterSetter": false,
            "description": "Verify a hashed password. Returns true\/false.",
            "attributes": [
                "@param string $password",
                "@param string $hash",
                "@return bool"
            ],
            "returnType": "bool",
            "links": []
        },
        {
            "definition": "needsRehash($hash)",
            "target": "fn_needsRehash",
            "isStatic": false,
            "isGetterSetter": false,
            "description": "Return true if a verified password hash should be re-hashed. For example if bcrypt cost was increased after users started using the app.\n\nExample Usage:\n\n    if ($password->verify($submitted_password, $hash)) {\n        if ($password->needsRehash($hash)) {\n            $new_hash = $password->hash($submitted_password);\n            \/\/ Save to db, etc",
            "attributes": [
                "@param string $hash",
                "@return bool"
            ],
            "returnType": "bool",
            "links": []
        },
        {
            "definition": "generate()",
            "target": "fn_generate",
            "isStatic": false,
            "isGetterSetter": false,
            "description": "Return a randomly generated password that is 12 characters in length and contains the following:\n\n  4 Uppercase Letters (A - Z)\n  4 Lowercase Letters (a - z)\n  2 Digits (0 - 9)\n  2 Special Characters (~, !, @, #, $, %, ^, &, *, ?, -, _)\n\nFor strong online password creation with options try:\n  https:\/\/www.lastpass.com\/password-generator",
            "attributes": [
                "@return string",
                "@throws \\Exception"
            ],
            "returnType": "string",
            "links": []
        },
        {
            "definition": "cost($new_value = null)",
            "target": "fn_cost",
            "isStatic": false,
            "isGetterSetter": true,
            "description": "Specify Cost to use when hashing the Password with bcrypt. Function [findCost()] shows how high the cost can be without slowing down your server.\n\nDefaults to 10.",
            "attributes": [
                "@param null|int $new_value",
                "@return int|$this"
            ],
            "returnType": "int | $this",
            "links": []
        },
        {
            "definition": "findCost()",
            "target": "fn_findCost",
            "isStatic": false,
            "isGetterSetter": false,
            "description": "This code will benchmark your server to determine how high of a cost you can afford when using bcrypt. You want to set the highest cost that you can without slowing down your server too much. 8-10 is a good baseline, and more is good if your servers are fast enough. The code below aims for \u2264 50 milliseconds stretching time, which is a good baseline for systems handling interactive logins.\n\nThis function comes directly from the PHP Docs at: https:\/\/secure.php.net\/manual\/en\/function.password-hash.php",
            "attributes": [
                "@return int"
            ],
            "returnType": "int",
            "links": []
        },
        {
            "definition": "algo($new_value = null)",
            "target": "fn_algo",
            "isStatic": false,
            "isGetterSetter": true,
            "description": "Get or set the Algorithm to use: ['bcrypt' or 'Argon2']. [bcrypt] is used by default and supported in all versions of PHP while [Argon2] requires PHP 7.2+.",
            "attributes": [
                "@param null|string $new_value",
                "@return string|$this",
                "@throws \\Exception"
            ],
            "returnType": "string | $this",
            "links": []
        },
        {
            "definition": "options($new_value = null)",
            "target": "fn_options",
            "isStatic": false,
            "isGetterSetter": true,
            "description": "Specify options when using Argon2. For bcrypt use [cost()].\n\nDefaults to:\n  [\n      'memory_cost' => PASSWORD_ARGON2_DEFAULT_MEMORY_COST,\n      'time_cost'   => PASSWORD_ARGON2_DEFAULT_TIME_COST,\n      'threads'     => PASSWORD_ARGON2_DEFAULT_THREAD,\n  ]",
            "attributes": [
                "@param null|array $new_value",
                "@return array|$this"
            ],
            "returnType": "array | $this",
            "links": []
        },
        {
            "definition": "pepper($new_hex_value = null)",
            "target": "fn_pepper",
            "isStatic": false,
            "isGetterSetter": true,
            "description": "Get or set an optional pepper value to use when hashing and verifying the password. For Password Hashing, Pepper is different than the Salt as Pepper is a secret value that is shared by all users. Salt is one of the primary security features of Passwords, while Pepper can be used in certain environments to provide an additional layer of security. If used the Pepper value MUST be saved outside of the database where the password hashes are saved and the pepper value must not be shared with end users. While it can provide an additional level of security it comes with significant complexity so using it requires careful consideration.\n\nThe pepper value must be a hexadecimal string and one can be generated from the [generatePepper()] function.\n\nAdvantages of Pepper:\n - In a highly structured environment where a Developer would not have access\n   to the database and the DBA would not have access to the source code then\n   adding pepper limits the number of people would have required shared secrets.\n - If a Database is compromised and hashes are stolen but the Application along\n   with the Pepper is safe then Pepper can used to prevent dictionary attacks.\n - Further Reading:\n   https:\/\/security.stackexchange.com\/questions\/3272\/password-hashing-add-salt-pepper-or-is-salt-enough\/3701\n\nDisadvantages of Pepper:\n - The Pepper value can't be changed without requiring all users of the\n   application to change their password. This can cause a lot of complexity\n   for managing users of the app. If all password hashes are stolen then\n   simply requiring users to change their password would likely be enough\n   for most apps.\n - If the Database and Application are on the same server then someone who\n   obtains Database Access is more likely to get source code access as well\n   which defeats the purpose of Pepper.\n - The algorithms used in this class (bcrypt and Argon2 with proper salt)\n   are well studied and known to be secure. Pepper only works in specific cases.\n - Further Reading:\n   https:\/\/stackoverflow.com\/questions\/16891729\/best-practices-salting-peppering-passwords\n   https:\/\/blog.ircmaxell.com\/2012\/04\/properly-salting-passwords-case-against.html\n\nOther Option:\n - Another option instead of using Pepper would be to encrypt the password\n   before hashing it or encrypt the hash. This has similar advantages and\n   disadvantages compared to using pepper.\n\nFor an overview of Salt and Pepper see the following links:\n   https:\/\/en.wikipedia.org\/wiki\/Salt_(cryptography)\n   https:\/\/en.wikipedia.org\/wiki\/Pepper_(cryptography)",
            "attributes": [
                "@param null|string $new_hex_value",
                "@return null|string|$this",
                "@throws \\Exception"
            ],
            "returnType": "null | string | $this",
            "links": []
        },
        {
            "definition": "generatePepper($bytes = 8)",
            "target": "fn_generatePepper",
            "isStatic": false,
            "isGetterSetter": false,
            "description": "Generate a random hex string for the [pepper()] function using cryptographically secure pseudo-random bytes.\n\nDefaults to 8 bytes in length (16 characters in hex)",
            "attributes": [
                "@param int $bytes",
                "@return string"
            ],
            "returnType": "string",
            "links": []
        }
    ],
    "links": []
}