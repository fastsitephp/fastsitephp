{
    "name": "FastSitePHP\\Security\\Web\\CsrfStateless",
    "short_name": "Security\\Web\\CsrfStateless",
    "link": "Security_Web_CsrfStateless",
    "namespace": "FastSitePHP\\Security\\Web",
    "description": "\u2018Stateless\u2019 CSRF Tokens\n\nStateless CSRF Tokens are not stored in Session but rather use a crypto keyed-hash message authentication code (HMAC) to create and verify the token.\n\nStateless Tokens work well if authentication happens with cookies that do not use standard PHP session functions, that said this class also works well with PHP Sessions and provides expiration time that can be changed per page.\n\nIf stateless authentication always happens through Request Headers for POST Requests and other transactions then CSRF attacks are prevented and CSRF Tokens are not needed. CSRF Tokens are generally needed if authentication happens with cookies (by default Session code always uses cookies).\n\nIf using PHP 5.3 then using this class will polyfill functions [bin2hex()] and [hex2bin()] and if using a version of PHP below 5.6 then this class will polyfill [hash_equals()].\n\nFor another Stateless CSRF Token implementation with NodeJS see the link below.",
    "attributes": [
        "@link https:\/\/www.paypal-engineering.com\/2016\/06\/01\/securing-your-js-apps-w-stateless-csrf\/"
    ],
    "properties": [],
    "methods": [
        {
            "definition": "generateKey()",
            "target": "fn_generateKey",
            "isStatic": true,
            "isGetterSetter": false,
            "description": "Return a key that can be used to generate and validate Stateless CSRF Tokens. The key must be kept private and not shared with end users.",
            "attributes": [],
            "returnType": null,
            "links": []
        },
        {
            "definition": "setup(Application $app, $user_id, $expire_time = null, $key = 'X-CSRF-Token')",
            "target": "fn_setup",
            "isStatic": true,
            "isGetterSetter": false,
            "description": "Setup and validate stateless CSRF Tokens. A good place to call this function is on route filters of pages that use authentication.\n\nThis will assign the token to app property $app->locals['csrf_token'] which then must be included with the form or response. When using [$app->render()] the value will be available as variable [$csrf_token].\n\nThis function requires the App config value $app->config['CSRF_KEY'] or an Environment Variable of the same name with a key generated from the function [generateKey()].\n\nFor usage see demo code.",
            "attributes": [
                "@link https:\/\/www.owasp.org\/index.php\/Cross-Site_Request_Forgery_(CSRF)",
                "@link https:\/\/en.wikipedia.org\/wiki\/Cross-site_request_forgery",
                "@link https:\/\/en.wikipedia.org\/wiki\/HMAC",
                "@param Application @app",
                "@param string|int $user_id - A unique identifier for the user. This doesn't have to be secret and can be a simple as an numeric field in a database.",
                "@param null|string|float $expire_time - An option expiration time for the token. The format is a Unix Timestamp in milliseconds or a string value that can be used by the PHP function [strtotime()], for example '+1 hour'.",
                "@param string $key - Defaults to ['X-CSRF-Token'], the key must be included in either a form field or request header when the request is submitted.",
                "@throws \\Exception"
            ],
            "returnType": null,
            "links": [
                "https:\/\/www.owasp.org\/index.php\/Cross-Site_Request_Forgery_(CSRF)",
                "https:\/\/en.wikipedia.org\/wiki\/Cross-site_request_forgery",
                "https:\/\/en.wikipedia.org\/wiki\/HMAC"
            ]
        }
    ],
    "links": [
        "https:\/\/www.paypal-engineering.com\/2016\/06\/01\/securing-your-js-apps-w-stateless-csrf\/"
    ]
}