<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="utf-8" />
        <title>FastSitePHP | Unit Testing</title>

        <!--
            QUnit linked from a CDN is used for Unit Testing.
            For local development create a [vendor] sub-directory,
            add the qunit CSS and JS files in it, and then update
            comments in this file to use the local version.

            Any version of QUnit should work.

            If running locally this may run from one of the following
            depending on how you have the projects setup:
                http://localhost:3000/fastsitephp/tests/index.htm
                http://localhost:3000/tests/index.htm
        -->
        <!-- <link rel="stylesheet" href="vendor/qunit-1.18.0.css"> -->
        <link rel="stylesheet" href="https://code.jquery.com/qunit/qunit-2.9.2.css">

        <style>
            #server-config-error {
                color: darkred;
                border: 10px solid red;
                padding: 20px;
                font-size: 1.1em;
                background-color: white;
            }
            #server-config-error p {
                margin: 0;
                padding: 0;
            }
            #server-config-error ul {
                list-style-type: none;
                margin: 20px 0 0 0;
                padding: 0;
                border-bottom: 1px solid red;
            }
            #server-config-error ul li {
                border: 1px solid red;
                padding: 10px;
                border-bottom: none;
            }
            #server-config-error ul li:nth-child(odd) { background-color: #FFDFDF; }
        </style>
    </head>
    <body>
        <!-- <script src="vendor/qunit-1.18.0.js"></script> -->
        <script src="https://code.jquery.com/qunit/qunit-2.9.2.js"></script>

	    <div id="server-config-error" style="display:none;"></div>
        <div id="qunit"></div>

        <!-- Core File Required by all Tests -->
        <script src="core.js"></script>

        <script>
            // Turn on or off specific Tests:

            // Unicode URL's will fail in certain enviroments (seen in PHP 5.3)
            window.runTestsWithUnicodeCodeUrl = true;

            // Set this to [true] to include time-consuming routes that may 2-30 seconds.
            // This can be set to [false] durning regular development.
            window.runTimeConsumingTasks = true;

            // JWT RSA Tests, not all PHP installs support RSA so turn off if needed.
            // These tests often may take a second or more as well.
            // On tested Macs, RSA runs extremely slow with the longest test taking
            // over a minute.
            window.runTestsWithRSA = true;
            window.runTestsThatCreateRSAKey = true;

            // The SMTP Client makes a call to [smtp.gmail.com] at port 587.
            // If the computer for testing doesn't have internet access the test will fail.
            window.runTestsRequiringInternet = true;

            // Some tests will write and delete temporary files
            window.runTestsRequiringFileWrite = true;
        </script>

        <!-- Uncomment or Comment out files as needed during development -->

        <script src="test-app.js"></script>
        <script src="test-app-compile-warning.js"></script>
        <script src="test-app-events.js"></script>
        <script src="test-app-no-setup.js"></script>
        <script src="test-app-render.js"></script>
        <script src="test-app-setup.js"></script>
        <script src="test-app-url-case.js"></script>
        <script src="test-environ-system.js"></script>
        <script src="test-net-config.js"></script>
        <script src="test-net-ip.js"></script>
        <script src="test-net-smtp.js"></script>
        <script src="test-security-crypto.js"></script>
        <script src="test-security-jwt.js"></script>
        <script src="test-security-password.js"></script>
        <script src="test-web-request-and-response.js"></script>
        <script src="test-web-request.js"></script>
        <script src="test-web-response.js"></script>

        <script>
            (function () {
                // ------------------------------------------------------------
                // Unit Tests
                // To test only one or a few functions put them in this
                // section and comment out all "test-*.js' scripts above.
                // ------------------------------------------------------------
                
                // TODO - functions are currently here for testing with PHP 8.0 (released end of November 2020)
                // Once all functions are handled for PHP 8.0 they will be removed from here.
                // When testing comment out above <script> includes.
                // Initial comments from testing are above each function.
                return;

                // DivisionByZeroError is thrown instead of E_WARNING
                runHttpUnitTest("Application Object - Error Test - Error Type E_WARNING", "test-app.php/error-warning", {
                    status: 500,
                    responseContains: [
                        '<td class="error-type">ErrorException</td>',
                        '<td class="error-severity">2 (E_WARNING)</td>',
                        '<td class="error-message">Division by zero</td>',
                        "<td>errorHandler</td>",
                        "<td>{closure}</td>",
                        "<td>call_user_func_array</td>",
                        "<td>run</td>"
                    ]
                });

                // For the [responseContains] array's with 2 items the first line is for PHP 5
                // and the 2nd line is for PHP 7
                runHttpUnitTest("Application Object - Error Test - Error Type E_PARSE or Throwable ParseError", "test-app.php/error-parse", {
                    status: 500,
                    responseContains: [
                        [
                            '<td class="error-type">ErrorException</td>',
                            '<td class="error-type">ParseError</td>'
                        ],
                        [
                            '<td class="error-severity">4 (E_PARSE)</td>',
                            "<td>call_user_func_array</td>"
                        ],
                        // Match any one of items as the text varies based on the version of PHP used
                        [
                            // Windows PHP 5.4 and 5.5
                            '<td class="error-message">syntax error, unexpected &#039;echo&#039; (T_ECHO), expecting &#039;,&#039; or &#039;;&#039;</td>',
                            // Windows PHP 5.3
                            '<td class="error-message">syntax error, unexpected T_ECHO, expecting &#039;,&#039; or &#039;;&#039;</td>',
                            // Mac with PHP 5.4
                            '<td class="error-message">parse error, expecting `&#039;,&#039;&#039; or `&#039;;&#039;&#039;</td>',
                            // PHP 7.4
                            '<td class="error-message">syntax error, unexpected &#039;echo&#039; (T_ECHO), expecting &#039;;&#039; or &#039;,&#039;</td>',
                            // PHP 8
                            '<td class="error-message">syntax error, unexpected token &quot;echo&quot;, expecting &quot;;&quot; or &quot;,&quot;</td>',
                            '<td class="error-message">syntax error, unexpected token &quot;echo&quot;, expecting &quot;,&quot; or &quot;;&quot;</td>',
                        ],
                        "test-app-parse-error.php",
                        [
                            "<td>shutdown</td>",
                            "<td>run</td>"
                        ]
                    ]
                });

                // Now gives - ArgumentCountError instead of E_NOTICE
                runHttpUnitTest("Application Object - Error Test - Error Type E_NOTICE", "test-app.php/error-notice", {
                    status: 500,
                    responseContains: [
                        '<td class="error-type">ErrorException</td>',
                        '<td class="error-severity">8 (E_NOTICE)</td>',
                        [
                            '<td class="error-message">Undefined variable: undefined_variable</td>',
                            '<td class="error-message">crypt(): No salt parameter was specified. You must use a randomly generated salt and a strong hash function to produce a secure hash.</td>'
                        ],
                        "<td>errorHandler</td>",
                        "<td>{closure}</td>"
                    ]
                });

                // Now gives [ArgumentCountError] with release build of PHP 8
                runHttpUnitTest("Application Object - Error Test - Error Control Operator", "test-app.php/error-control-operator", {
                    responseContains: [
                        [
                            // PHP 5 and 7
                            "@file(null) === false",
                            // PHP 8                
                            "gettype(@crypt(string, [missing])) = string",
                        ]
                    ]
                });

                // Now gives [ArgumentCountError] with release build of PHP 8
                runHttpUnitTest("Application Object - Error Test - Error Reporting Disabled", "test-app.php/error-reporting-disabled", {
                    responseContains: [
                        [
                            // PHP 5 and 7
                            "file(null) === false",
                            // PHP 8                
                            "gettype(@crypt(string, [missing])) = string",
                        ]
                    ]
                });

                // Now gives [ArgumentCountError] with release build of PHP 8
                runHttpUnitTest("Application Object - Error Test - Error Control Operator Not Used", "test-app.php/error-control-operator-not-used", {
                    status: 500,
                    responseContains: [
                        '<td class="error-type">ErrorException</td>',
                        [
                            // PHP 5 and 7
                            '<td class="error-severity">2 (E_WARNING)</td>',
                            // PHP 8
                            '<td class="error-severity">8 (E_NOTICE)</td>',
                        ],
                        [
                            // PHP 5 and 7
                            '<td class="error-message">file(): Filename cannot be empty</td>',
                            // PHP 8
                            '<td class="error-message">crypt(): No salt parameter was specified. You must use a randomly generated salt and a strong hash function to produce a secure hash.</td>',
                        ],
                        "<td>errorHandler</td>",
                    ]
                });

                // Now gives [ArgumentCountError] with release build of PHP 8
                runHttpUnitTest("Application Object - Error Test - Error Control Operator", "test-app.php/error-try-catch-instead-of-control-operator", {
                    responseContains: [
                        [
                            // PHP 5 and 7
                            "[ErrorException]: file(): Filename cannot be empty",
                            // PHP 8
                            "[ErrorException]: crypt(): No salt parameter was specified. You must use a randomly generated salt and a strong hash function to produce a secure hash.",
                        ]
                    ]
                });

                // Test 0 did not return the expected error message:
                // Error: bin2hex(): Argument #1 ($string) must be of type string, array given
                // Expected: ["bin2hex() expects parameter 1 to be string, array given","bin2hex(): Argument #1 ($data) must be of type string, array given"]
                runHttpUnitTest("Security Crypto - Compatibility Functions", "test-security-crypto.php/compatibility-functions", {
                    responseContains: [[
                        "[/compatibility-functions], [Tests: 26], [Error Tests: 6], [Len: 661], [sha256: 5fa42c28767343636ed2ce0b1c70b548415a23bb7dffc6d7b103294ce7922205]",
                        "[/compatibility-functions], [Tests: 26], [Error Tests: 6], [Len: 654], [sha256: 45589eff61e712d8959f0a4b5a70bd1cc330b6ce08e7bf8dc53040f4ee5614cd]",
                        "[/compatibility-functions], [Tests: 26], [Error Tests: 6], [Len: 704], [sha256: 4ad29ee9cdcad1ce645bb179f700e20cb7cc6c859d3ff1e9a18b9ac2ad19ff0c]",
                    ]]
                });

                // Received the following error on Ubuntu 20.04 LTS (only first time all tests ran):
                //      E_WARNING
                //      Narrowing occurred during type inference of ZEND_FETCH_OBJ_R. Please file a bug report on bugs.php.net
                //      File: /var/www/html/tests/test-net-config.php
                //      Line 15 
                runHttpUnitTest("Networking Config Object", "test-net-config.php/check-net-config-class", {
                    response: {
                        get_class: "FastSitePHP\\Net\\Config",
                        get_parent_class: false
                    }
                });
            })();
        </script>
    </body>
</html>