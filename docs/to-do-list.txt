
TODO List

--------------------------------------------------------------------------
|
|   In General:
|
|   *) More Documentation
|   *) More Examples (for all or most classes and features)
|   *) More Unit Testing
|       - A number of manual test files from [fastsitephp/scripts/testing-*.php]
|         need to be converted unit tests under [fastsitephp/tests/*]
|       - All classes and code must be Unit tested (ideally every line).
|         Currently all core classes are tested but not all code.
|   *) Additional Classes and Features
|   *) Translations
|      https://github.com/fastsitephp/fastsitephp/blob/master/docs/i18n-translations.md
|
|   There is no priority to this list.
|   All contributions are welcome.
|
|   Generally every item in this list is of low priority and more of a
|   wish list item rather than an actual need. The highest priority items
|   are at the top and start with `**)`. Development typically occurs
|   based on the need of real world production sites and apps.
|
--------------------------------------------------------------------------

**) Starter Site
    - A 2.0 version is being planned that will allow for a very minimal CMS
        and allow editing of all code on the server similar to how the playground site works.
    - Once created several templates will be provided (PHP, SPA, HTML only, etc) along
        with a one-page simple site setup wizard to create an initial admin user.
    - Add Unit Testing
        - Include CLI Testing for the Auth middleware class and HTML rendered on pages to start
        - Initially this will be done with Node and a client-side Puppeteer Script
        - Server-side PHP testing using phpunit - https://phpunit.de/ or custom classes will likely
            no be created as a Puppeteer/Node Script can easily be created to verify all core security
            logic and pages on a site and it allows from testing of a live site from any server.

**) Create Docker Image
    - Include the starter site?

**) Create Documentation that shows how Unit Testing works
    - Currently when testing on specific versions of PHP 8 with Linux Ubuntu
        on both Apache and nginx one test is known to fail at times but then
        works when running the test a 2nd time:
            Test: test-net-config.php/check-net-config-class
            Error:
                E_WARNING
                Narrowing occurred during type inference of ZEND_FETCH_OBJ_R. Please file a bug report on bugs.php.net
                File: /var/www/html/tests/test-net-config.php
                Line 15
    - The error also happens the first time for each request after
        a reboot but then works after it is called once.
    - This error does not happen when using the pre-built Windows builds of PHP

**) fastsitephp\scripts\create-api-json-files.php
    This file should be updated to handle multiple languages when the other language is a duplicate of the `en` file.
    Currently many of the `pt-BR` files are a duplicate of `en`

**) Refactor early manual Unit Test files [fastsitephp/scripts/testing-*.php] as proper unit tests
    under [fastsitephp/tests/*]. Additional details exist for each or most of the scripts in this file.
    These files were created because creating full automated unit tests was causing too much of a delay
    for the initial release.

*) New Classes to Create:
    Environment\UserAgent
        - Starting point: vendor\FastSitePHP\examples\site-examples\Controllers\DatabaseDemo.sql
        - The SQL demo file should also be expanded upon for more traffic, it is mostly based on
          US General Population (GENPOP) Web Traffic from around 2015-2018.
        - SQL file should have commented versions available for Oracle, MySQL, and PostgreSQL
    FileSystem\Path::join

*) Add FastSitePHP to TechEmpower Benchmarks:
    https://www.techempower.com/benchmarks/
    * FastSitePHP has been added to [the-benchmarker/web-frameworks] and scored the highest
      of all standard PHP frameworks that do not use swoole or other in-memory third-party servers.
    https://github.com/the-benchmarker/web-frameworks

*) PHP Script to download and update and related docs for [cacert.pem]
    - Files:
        fastsitephp\src\Net\cacert.pem
        fastsitephp\src\Net\cacert.pem.sha256
    - Source:
        https://curl.haxx.se/docs/caextract.html
    - Currently the file is updated manually several times per year
    - A simple script can make it easy to update existing sites

*) Known Site Issues
    - iPhone/Safari (latest) - l10n demo does not work because Safari doesn't fully support:
            <input type="datetime-local">
        On desktop safari the page works but no date controls show:
            https://www.fastsitephp.com/en/examples/l10n-demo
        Need to check if safari and just use <input type="text"> from JavaScript
        Possibly change to use pickadate for Safari and other unsupported browsers
            https://amsul.ca/pickadate.js/
    - Not an issue for most users but ideally the pages with tab layout should use the ARIA tab role
            https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/Tab_Role
        Example page:
            https://www.fastsitephp.com/en/api
    - Improve Accessibility and Best Practices based on Chrome DevTools Lightsail Audit
        - Need to support HTTP/2 on the servers in addition to http/1.1
        - Remove duplicate [id] in the SVG on home page and other minor items

*) Install Script [create-fast-site.sh]
    - Running:
        wget https://www.fastsitephp.com/downloads/create-fast-site.sh
        sudo bash create-fast-site.sh
    - Need doc on how to unit test with nginx:
        1) sudo nano /etc/nginx/sites-available/fastsitephp
            Replace:
                location ~ \.php$ {
            With:
                location ~ \.php {
        3) sudo nano /etc/nginx/snippets/fastcgi-php.conf
            Replace:
                fastcgi_split_path_info ^(.+\.php)(/.+)$;
            With:
                fastcgi_split_path_info ^(.+\.php)(/|/.+)$;
        3) sudo systemctl reload nginx
        4) Run Tests (after copying the `tests` directory)
        *) With nginx all but 2 tests should pass. They are related to strong etags which nginx does not allow
    - Need to test with the Windows Subsystem for Linux
        https://docs.microsoft.com/en-us/windows/wsl/install-win10
        https://docs.microsoft.com/en-us/windows/wsl/about
    - In the future add support for more Linux OS's
    - Future likely add a default 502 bad gateway fallback page with correct settings for nginx
        By default nginx will show a generic 502 message when there are more concurrent connections that the server
        can handle (for example 1000 concurrent php connections using default settings)

*) Once all pages are translated in Arabic use [$html_dir] at the root <html> element
    - Search code for [$html_dir], currently 2 files are affected
    - Another possible option may be to use JavaScript to determine [dir="rtl" or dir="ltr"]
      for partial translations.

*) Documentation to create
    - Publishing releases
        - Ideally there would be a better workflow, possibly a separate "Release" branch
        - Currently releases need [export-ignore] lines in [.gitattributes]
            while the master must have them commented out. For the initial release this was done manual.
    - How Unit Testing works
        - Markdown doc needs to be created in [docs] folder and linked from readme
        - Search this file for "unit test with nginx" which needs to be documented.
    - How Linting works:
        - This could be a new markdown file linked from the readme in the [docs] folder
        - Either as a separate doc or a larger doc such as "Editing the Framework Code"
        - Related Print screens
            https://fastsitephp.s3-us-west-1.amazonaws.com/img/linting/0-phpstan-results.png
            https://fastsitephp.s3-us-west-1.amazonaws.com/img/linting/1-phpstan-code-check.png
            https://fastsitephp.s3-us-west-1.amazonaws.com/img/linting/2-phpstan-config-update.png
            https://fastsitephp.s3-us-west-1.amazonaws.com/img/linting/3-php-pslam-error.png
            https://fastsitephp.s3-us-west-1.amazonaws.com/img/linting/4-php-pslam-code-before.png
            https://fastsitephp.s3-us-west-1.amazonaws.com/img/linting/5-php-pslam-code-fixed.png
        - Also document the following which has been used:
            https://github.com/FriendsOfPHP/PHP-CS-Fixer
            Run:
                {assume root dir}
                cd fastsitephp
                php php-cs-fixer-v2.phar fix src
            Do not run on Windows as it will show ever file changes due to line endings when using
            system settings from gitignore
        - Alternative options to [PHPStan] that have been tested.
          Just like [phpstan] running these would need a lot of config
          files so currently only [phpstan] is used.
            https://github.com/vimeo/psalm
            https://github.com/phan/phan
          Similar to [phpstan] a (*.phar) file would be downloaded and ran.
            php psalm.phar > psalm_results.txt
            php phan.phar > phan_results.txt
    - Document on how to use Composer
        # Windows
        # First install composer
            composer require fastsitephp/fastsitephp
            composer create-project fastsitephp/starter-site my-app
        # Mac/Linux/other
        # Download composer to directory
            php composer.phar require fastsitephp/fastsitephp
            php composer.phar create-project fastsitephp/starter-site my-app
    - Document local development URL's
        http://localhost:3000/FastSitePHP/website/public/en/
        http://localhost:3000/FastSitePHP/website/app_data/sample-code/home-page-en.php/
        http://localhost:3000/FastSitePHP/website/app_data/sample-code/home-page-en.php/examples
        http://localhost:3000/FastSitePHP/tests/index.htm
    - Step by Step Setup of Sites
        - Updated Print Screens on [install-php-on-linux] using [apt] instead of [apt-get] and installing the Starter Site
        - Framework (how to run examples when downloading directly)
        - Main Site (uses [FastSitePHP\docs\Main Site Server Setup.txt])
    - Source Code Folder structure
    - How the Unit Testing for FastSitePHP works
        - Include print screen examples of how it recommends fixes
        - Include docs for use with Linux, Mac, Windows
        - Update the [readme.txt] file once the link is created
    - Publish step by step guide on FastSitePHP Server is Setup
    - Linux Install Doc
        - Need more OS examples
        - Examples on how to connect to linux (possibly in separate docs for Mac and Windows)
    - PHP and FastSitePHP with Docker?
    - Need to come up with workflow and/or examples on how to publish images
        and then docs. Currently images are hosted on AWS and saved to a separate
        Repository.
    -  How to use the Windows Binary Downloads:
        https://windows.php.net/download/
        https://windows.php.net/qa/
        - [x64 Non Thread Safe] or [x86 Non Thread Safe]
        - To get Unit Tests and Site features working on Windows after download copy [php.ini-production] as [php.ini]
            then enable settings:
                extension_dir = "ext"
                extension=curl
                extension=openssl
                extension=pdo_sqlite
        - Run commands (changing file paths based on local system):
            cd "{fastsitephp root}"
            "C:\Users\Administrator\Downloads\php-8.0.0-nts-Win32-vs16-x64\php.exe" -S localhost:8080
            "C:\Users\Administrator\Downloads\php-8.0.0-nts-Win32-vs16-x86\php.exe" -S localhost:8080
        - View Pages
            http://localhost:8080/fastsitephp/website/public/sysinfo/phpinfo
            http://localhost:8080/fastsitephp/website/public/en/
            http://localhost:8080/fastsitephp/tests/index.htm
            http://localhost:8080/starter-site/public/en/
            * Or remove "/fastsitephp" if running from main repository directly
            * This assume full setup with all repositories under a main [fastsitephp] directory

*) Linux Install Doc https://www.fastsitephp.com/en/documents/install-php-on-linux
    - Make the layout easier to use when picking an OS:
        This will likely be done with JavaScript only if the page is [install-php-on-linux]
        Example - get all <h3> links using:
            document.querySelectorAll('h3')
        Then create a <ul> link list in the [Overview] topic
        Alternatively a Tab Layout could be used but that would likely take more time than it's worth
        Another option would be a separate document per OS and then all docs can have easy links to each other
    - Add detailed nginx install guide after layout has been made easier to use
        # See also the most recent version of [fastsitephp\scripts\shell\bash\create-fast-site.sh]
        sudo apt update
        sudo apt install -y nginx
        sudo ufw allow 'Nginx HTTP'
        sudo apt install -y php-fpm
        sudo nano /etc/nginx/sites-available/default
            index index.php index.html index.htm index.nginx-debian.html;
            try_files $uri $uri/ /index.php$is_args$args;
            # location ~ \.php$ {
            location ~ \.php {
                include snippets/fastcgi-php.conf;
                fastcgi_pass unix:/var/run/php/php7.2-fpm.sock;
            }
        # When using `create-fast-site.sh` run:
            sudo nano /etc/nginx/sites-available/fastsitephp
            Replace:
                location ~ \.php$ {
            With:
                location ~ \.php {
        # Note, if using a default install [sites-available/default] is typically not modified on production systems, see comments in the file
        # Also the default [location ~ \.php$ {] will work however [location ~ \.php {] is needed
        # for Unit Testing with the Web Server
        # Also optional for unit testing:
        sudo nano /etc/nginx/snippets/fastcgi-php.conf
            Replace:
                fastcgi_split_path_info ^(.+\.php)(/.+)$;
            With:
                fastcgi_split_path_info ^(.+\.php)(/|/.+)$;
        sudo systemctl reload nginx
        sudo adduser ubuntu www-data
        sudo chown ubuntu:www-data -R /var/www
        sudo chmod 0775 -R /var/www
        cd /var/www/html
        echo "<?php phpinfo(); ?>" | sudo tee phpinfo.php
        # Install FastSitePHP Starter Site:
        cd ~
        wget https://github.com/fastsitephp/starter-site/archive/master.zip
        sudo apt install unzip
        unzip master.zip
        cp -r ~/starter-site-master/app /var/www/app
        cp -r ~/starter-site-master/app_data /var/www/app_data
        cp -r ~/starter-site-master/scripts /var/www/scripts
        cp -r ~/starter-site-master/public/. /var/www/html
        sudo apt install php7.2-zip
        php /var/www/scripts/install.php
        sudo rm /var/www/html/.htaccess
        sudo rm /var/www/html/Web.config
        sudo rm /var/www/html/index.nginx-debian.html
        # Unit Testing
        sudo apt install php7.2-sqlite php7.2-gd php7.2-bc php7.2-simplexml
        cd ~
        wget https://github.com/fastsitephp/fastsitephp/archive/master.zip
        unzip master.zip
        cp -r ~/fastsitephp-master/tests /var/www/html/tests
        # View http://example.com/tests/index.htm

*) Create Additional Interfaces for [\FastSitePHP\Data\KeyValue\StorageInterface]
    - Currently only SQLite has been created:
        http://localhost:3000/FastSitePHP/website/public/en/api/Data_KeyValue_SqliteStorage
    - At a minimum both [memcached] and [redis] should be supported
        http://www.memcached.org/
            https://www.php.net/manual/en/intro.memcached.php
        https://redis.io/
            https://github.com/phpredis/phpredis
            https://github.com/nrk/predis
            https://redis.io/clients#php
    - Add a session storage class as well?
        If so need to add comments about not using sleep while a session is open
    - Installer [scripts/install.php] and Autoloader [scripts/fast_autoloader.php]
        should be setup to optionally handle a [Predis] install.

*) Examples
    - System Info (only returns real info if running in localhost or modified, otherwise return content generated from example cloud servers)
            $sys = new \FastSitePHP\Environment\System();
            $data = $sys->osVersionInfo();
            //$data = $sys->systemInfo();
            //$data = $sys->diskSpace();

            //$path = '/Users/conrad/Sites/fastsitephp/app_data/examples/sys-osinfo-mac.json';
            //file_put_contents($path, $data);
            //file_put_contents($path, json_encode($data, JSON_PRETTY_PRINT));

            header('Content-Type: text/plain');
            echo json_encode($data, JSON_PRETTY_PRINT);
            //echo $data;
    - CSRF
    - Data Validation Class
    - Request Demo [examples/request-demo]
        Under Tab [Application Functions], provide an example of how it would differ if using "index.php"
        between [rootUrl()] and [rootDir()]
    - Better formatting for mobile - this applies to all demos
    - Route Pattern matching page
    - HTML Logging
    - Image - Create docs and demos from [testing-thumbnails.php] and [testing-img.php]
        Also create examples using various JavaScript cropping libraries. For libraries
        such as jquery-jcrop the x,y,w,h value can be submitted and then call [crop()]
        server side.
        http://deepliquid.com/content/Jcrop.html
        https://jamesooi.design/Croppr.js/
        https://jcrop.com/
        https://fengyuanchen.github.io/cropperjs/
        https://foliotek.github.io/Croppie/
    - Form Posting and Validation
    - Using JS Frameworks (React and Vue)
    - ETags and 304 Responses
    - File Encryption
    - Signed Data
        - Include a JavaScript validation and parsing function for the demo page.
        - Regex Validation:
            var regexExpires = /^([a-zA-Z0-9_-]{2,}).(n|s|i32|i64|f|b|j).(\d+).([a-zA-Z0-9_-]{2,})$/;
            var regexBasic = /^([a-zA-Z0-9_-]{2,}).(n|s|i32|i64|f|b|j).([a-zA-Z0-9_-]{2,})$/;
        - See file [FastSitePHP\website\public\js\playground.js], functions:
            parseSiteKey()
            decodeBase64UrlSafe(base64url)
        - Also provide notes on:
            https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#The_Unicode_Problem
    - JWT
    - Config Builder
    - IP Validation with CIDR
    - File Search
    - File Security
    - Existing Encryption Demo - Add more options (separate tab or hidden by default?) to allow a user to encrypt using different settings
        Ideally, allow changing of all settings that are possible but don't allow PBKDF2 on a public site
    - Request Example Page
        Include a demo/test tab with examples of reading different content types submitted by the user
            example Form Post and JSON POST
    - Crypto Example?
        Add a code builder tab to build code with different options?
    - Email demo
        - Possibly Allow testing of many more settings (ideally all getter/setter functions):
          allowUnicodeEmails(), isHtml(), header(), attachFile(), etc
        - Allow multiple addresses for [To, CC, BCC]
        - Syntax highlighting of SMTP commands (send, reply, etc) - possibly create a custom prism plugin for this
        - HTML editor is very minimal and was created quickly
            Need to add at least several more buttons and draw better svg icons for each button.
            The list icon was quickly created with an online svg app.
    -  Data\Validator
        - HTML vs PHP Validation (basic example then all fields example):
            HTML Form Example:
                <input name="name" title="Name" required>
                <input name="age" title="Age" required min="13" max="99">
                <input name="phone" title="Phone" pattern="[0-9]{3}-[0-9]{3}-[0-9]{4}">
                <input name="password" type="password" title="Password" required minlength="8" maxlength="30">
                <input name="confirm" type="password" title="Confirm Password" required>
                // JavaScript used to validate [password] and [confirm]

            Server-Side Validation:

            $validator = new \FastSitePHP\Data\Validator();
            $validator
                ->addRules([
                    ['name',     'Name',     'required'],
                    ['age',      'Age',      'required minlength="2"'],
                    ['phone',    'Phone',    'pattern="[0-9]{3}-[0-9]{3}-[0-9]{4}"'],
                    ['password', 'Password', 'required minlength="8" maxlength="30"'],
                    ['confirm',  null,        'check-password'],
                ])
                ->customRule('confirm-password', function($value) {
                    $password = (isset($_POST['password']) ? $_POST['password'] : null);
                    return ($value === $password ? true : 'Both [Password] and [Confirm Password] must match.');
                });

            list($error_messages, $error_fields) = $validator->validate($_POST);
            if ($error_messages) {
                // Error Logic
            }

        - Docs to state that rules in string format similar to HTML so that HTML code can easily be copied
        - Docs to recommend [Request->value()] if only basic Sanitization is needed
        Docs
            - first show a simple example with no custom rules and text matching HTML
            - Then show an Advanced one where all Tests fail with one object and succeed with the other
            - Docs pref notes that while about 15-20x faster array vs string rules
                the difference is so small that it would be a micro-optimization
                to pass rules as an array. If a site expects 1,000 requests per second
                and used validation then the optimization could be worthwhile.
        - Links for Docs:
            https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input
            https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation
            Add something for iOS or Android?

*) Documentation pages to create:
    - Updating this site:
        - Where to add files
        - How to update lang files, etc
        - Update humans.txt for new Contributors
        - How to update the sitemap of the main site during local development
            http://localhost:3000/fastsitephp/website/public/site/generate-sitemap
        - How to refresh API Docs
            vendor\FastSitePHP\scripts\create-api-json-files.php
    - docs for various scripts used with this site
    - how the playground site works
    - Using CORS - provide example from DataFormsJS
    - Links (with print screens of sites) to popular PHP sites (frameworks, blogs, components, etc)
        This might end up a PHP page rather than [md], if needed just use simple logic in the Controller
        use PHP rather than MD.
    - Signed Data Format
    - Crypto - easy to understand for end users
    - Crypto - file format and how data types are saved with this code
    - Installing PDO Drivers (Web Platform Installer for SQL Server PDO Driver)
        Often DLL's are included, simply need to enable
    - PHP General - Where PHP is installed and folder structure (Extensions, etc)
    - How to read info with [phpinfo()]
    - Send Email with Print Screen of SMTP Log Info
        Add a small 3-file zip download for testing emails with the 2
        needed PHP files (no framework necessary). It needs to be easy enough
        for sys admins to use with minimal programming experience
    - Environment Info using the Classes
    - Docs on how to use [.htaccess] might need to add [mod_rewrite] support for subdirectories
    - App Routing
    - How to use ETag/304 and Crypto in a method similar to a "Forever Cookie"
    - HttpClient Docs
        - In docs likely link to Guzzle and also clients from Stripe, ebay, etc
            http://docs.guzzlephp.org/en/stable/
            https://github.com/guzzle/guzzle
            https://github.com/stripe/stripe-php/blob/master/lib/HttpClient/CurlClient.php
            https://github.com/paypal/sdk-core-php/blob/master/lib/PayPal/Core/PPHttpConfig.php
            https://github.com/paypal/sdk-core-php/blob/master/lib/PayPal/Core/PPHttpConnection.php
            https://github.com/dropbox/dropbox-sdk-php/blob/master/lib/Dropbox/Curl.php
        - Also docs showing basic code examples:
            $ch = curl_init();
            curl_setopt($ch, CURLOPT_URL, "http://www.example.com/");
            curl_setopt($ch, CURLOPT_HEADER, 0);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
            echo curl_exec($ch);
            curl_close($ch);
            exit();
    - Using Symfony Request/Response Objects with FastSitePHP Routing - possibly in the Quick Reference as well
    - How graphics are created and editor for the site - Sketch and other apps

*) Unit Testing
    - The below items are a lower priority than having all classes fully tested
    - JavaScript Code for Unit Tests can be converted to latest version of JavaScript
    - [core.js] will be converted to a ES Module with exports and then calling files will import from it
    - Update JS Code to also allow CLI using Node.
    - After test converting the JS files to JSON and having a new core JS file and PHP version
      so that that Unit Tests can be run in Browser, with Node, or with PHP
    - Strong ETags fail during Unit Testing with standard nginx setup.
      Strong Etags are not common so this is acceptable, however it would be good to document
      how to allow strong etags so the tests can pass:
        "Response Object - Cache Headers Test - 3c - Strong ETag Function Test", "test-web-response.php/cache-headers-3-strong?_="
        "Response Object - Cache Headers Test - 5b - 304 Response for Strong ETag", "test-web-response.php/cache-headers-5"
      Related link:
        https://forum.nginx.org/read.php?29,251164,251966
      Another option would be to modify the Unit Test to allow for Weak ETags form nginx or skip this test if using nginx.
      Likely just keep it (and document it) as the Unit Tests are meant to show what a web server supports

*) Unit Testing JS Clarification
    [responseContains] should be replaced with [responseMatchesOne] for a number of Tests

*) Use [$app->lang] for language translations with the Error and Page Not found templates.
    Translations will be stored in JSON files (1 per language), likely in a directory [I18N]
    under [Templates].

*) Create Unit Tests for the Following Classes:
    Environment\System

*) Application Object
    - Add Unit Tests for [$show_detailed_errors], [lazyLoad()], and [sendPageNotFound()], [cookies],
        [cookie], [clearCookie], [onRender], [errorPage()]
    - requestedPath() - build different mock tests based on actual computer settings
        This will allow IIS/Apache/etc to be verified from other servers
    - Create Unit Tests for String 'class' and 'class.method' route options.
      When Unit Tests were created only the Closure option was supported.
    - Add Unit Tests for string 'Class.method' filter and mount functions and middleware_root
    - Possibly update the [statusCode()] to allow anything between 100 and 599 like the Response Object
        This includes allowing 304 so an app can use a fully custom 304 response if needed
    - Create Unit Tests for [error-cli.php], this can be done by calling [shell_exec()] or [exec()] with [php] and a custom script
    - Likely add a property for CLI errors such as [error_template_cli]
    - Add Unit Tests for Variables in mount path - Currently the feature is verified on the site itself
        $app->mount('/:lang/examples/', 'routes-examples.php');
        Also unit test for error 'Mount condition for URL ...'
    - Add Unit Tests for [$page_title, $message] params on error callback
    - Unit test error:
        'An item from [Route->filter()] for URL [%s %s] was called and ...'
    - Also add unit testing for filter functions that return a response object.
      This is now used for Auth on the starter site which helps confirm that the feature works without unit testing for now.

*) Web\Response
    - Create and Expand on Unit Tests for the following functions:
        clearCookie() - also more tests from JavaScript related to Cookies
        signedCookie() Verify all parameters, this can be done server-side by checking collection before the response
        encryptedCookie() - Verify all parameters, ...
        jwtCookie() - Verify all parameters, ...
        jsonOptions() - Currently manually tested, need to Unit Test with JSON_PRETTY_PRINT on PHP 5.4+
        contentType('graphql')
    - Add 'graphql' to [fileTypeToMimeType()]
    - fileStream() similar to file but accepts HTTP_RANGE header
    - Test one or more non-common status codes such as 503 Service Unavailable
        PHP 5.3 code will need to be updates for additional status codes
            Possibly make it a polyfill
        Also unit test the error message from the function
        https://en.wikipedia.org/wiki/List_of_HTTP_status_codes
    - New function [asFile(content, name)] that returns regular content as a file download
    - Add Unit Tests for 429 - 'Too Many Requests' responses
    - Add Unit Tests for the error message 'Unhandled Response Status Code of...' from statusCode()

*) Web\Request
    - queryString() - More unit tests that verify all $format options (currently they are verified in [value()])
    - form() - ...
    - url() - return full URL including query string. Just like [host()] and other user input headers this
        needs to handle proxy servers and since it's related to security it must be carefully developed and tested.
    - Need to add Unit Tests for the 'Authentication' header. Code properly works on all servers - just needs Unit Tests.
        The reason is that Apache can remove it from $_SERVER, however it's handled here.
    - origin() - need to unit test string value of 'null'
    - bearerToken() - need to unit test, this feature is used on the Starter Site Auth demo

*) Initial Unit Test [/check-server-config]
    If a 500 response is returned then JavaScript should provide a message that JSON support is
    not installed if it can be determined from the error. This can be manually verified by
    installing only Apache and PHP without Modules on FreeBSD.

*) Test many additional Linux environments and add more helper info to [/check-server-config]
    based on common modules that may be missing. Also create docs for various OS installs.

*) Unit Test function [checkObjectMethods()] needs to handle static methods
    Used in [Net\IP] class and more

*) Data\Database
    - Create Unit Tests - use file [docs/scripts/testing-db.php] and [home-page-en-examples.php] as a starting point
    - ODBC and DB2 Classes will have separate test files not part of the standard unit tests
    - Additional separate unit test files for different database vendors (Oracle, Microsoft, etc)
    - Need to test [lastInsertId()] with Oracle and PostgreSQL. Might have to use bound parameters with Oracle:
        https://stackoverflow.com/questions/18441693/how-to-get-the-row-of-the-last-insert-on-oracle-using-pdo
      Create Docs on how to handle last insert id with different databases.
    - Functions [beginTransaction()], [commit()], and [rollback()] to all 3 classes
        and as part of the [DatabaseInterface] class
        http://php.net/manual/en/pdo.begintransaction.php
        http://php.net/manual/en/function.odbc-autocommit.php
        http://php.net/manual/en/function.db2-autocommit.php
    - Add additional Vendor Database Classes using [AbstractDatabaseFunctions]

*) FileSystem\Search
    - Additional file search options modifiedAfter, modifiedBefore, sizeLargerThan, sizeSmallerThan, sizeMbLargerThan, sizeMbSmallerThan
       modifiedBetween() which would set modifiedAfter/modifiedBefore
       createdAfter/etc
    - Options to limit large files from being included with [includeText()]
    - Create Unit Tests - use file [docs/scripts/testing-fs.php] as a starting point
    - Allow [urlFiles()] to work with [recursive(true)]

*) Net\Config - Create more Unit Tests
    - parseNetworkInfo()
      Get info by setting up more Temp Cloud Servers (example FreeBSD, Linux, etc)
        parseNetworkInfo(networkInfo()) - returns objects with correct key properties
        parseNetworkInfo(networkInfo()) - with parsed files
        parseNetworkInfo(networkInfo()) - returns null on all errors
        parseNetworkInfo(networkInfo(), true) - throws specific exceptions
    - networkIpList() returns an array of valid IP addresses
    - networkIp() currently doesn't allow mock tests and has to be verified on many
        OS's. Separate parts fo the code to a new function such as [netInfoToIp()].
        That way the logic of the function can be verified

*) Unit Testing - docs\unit-testing\test-no-templates.php
    See if these errors can be replicated using:
        stream_wrapper_unregister('file');
    If not then create a headless browser JS file to test this page
    Also expand the above page for [errorPage()] or develop a unit test for it as well.

*) PHP 7.1+ test with 'sha3-384', 'sha3-512', etc
    https://en.wikipedia.org/wiki/SHA-3#Examples_of_SHA-3_variants

*) Security\Crypto\SignedData
    - Add new functions:
        SignedData->expireTime(signed_text) - returns int/timestamp or null
        SignedData->isExpired(signed_text) - returns bool
    - These will only be used for reporting on the time stamp if desired by an app
      and not for security.
    - SignedData uses a timestamp format compatible with JavaScript, here is a quick
      example of how to convert it for PHP functions (Unix Timestamp in Seconds):
        $token = $_COOKIE['USER'];
        $exp = (float)explode('.', $token)[2];
        $exp = $exp / 1000;
        $exp = (int)$exp;
    - Adding these functions requires unit testing

*) Create Unit Tests for CSRF Classes
    - Verify that the 3 type of tokens work (Session, Stateless, Stateless with expire date)
    - Verify that changing the token causes an error
    - Likely have to use GET/POST [runGetAndPostUnitTest] tests and modify the JS to handle 500 http search text
    - Create docs with advantages/disadvantages of each method

*) FastSitePHP\FileSystem\Security
    - Add a new function [dirContainsDir]
    - Build Unit Tests, see [testing-fs-security.php]

*) FastSitePHP\Security\AbstractCrypto
   hash_pbkdf2() Polyfill
        Create a Polyfill function for [hash_hmac_algos()] which was added in PHP 7.2
        and use it instead of [hash_algos()]
        http://php.net/manual/en/function.hash-hmac-algos.php

*) FastSitePHP\Security\Crypto
    - Add Unit Tests to verify the '+1 hour' default timeout for [sign()] and [encodeJWT()]

*) FastSitePHP\Security\Crypto\Encryption
    - For supported versions of PHP need testing with
      all places [isAEAD_Mode()] with Password Key Type (PBKDF2)

*) FastSitePHP\Security\Crypto\FileEncryption
    - Modify Unit Test function [encryptAndDecryptFile()] and add new routes to
      test for File Encryption with Passwords. At least one standard sha512/200_000
      and one custom PBKDF2 params. For now code has been manually verified using
      [crypto-test-many-files.php].
    - Unit Test all errors that can be replicated
    - Unit Test an error or errors the with true/false for [displayCmdErrorDetail], code is
      manually verified for now. Most Unit Tests run the value with [true] for dev testing.
    - Some errors are included for safety and won't be tested, errors like this:
		// Verify that the encrypted file can be read by PHP
        if (!is_file($enc_file)) {
      A doc or general comment should explain which errors are not unit tested and why
    - Additional Unit Testing with a 32-Bit FreeBSD System
        - Search for all comments related to [$truncate_cmd_2] in the following file:
            fastsitephp/src/Security/Crypto/FileEncryption.php
        - Basically there is a permissions issue with the `truncate` on some tested 64-Bit VM's
        - There is a work around for 64-Bit systems
        - For large file testing see:
            fastsitephp/scripts/crypto-test-large-file.php
        - And for FreeBSD file encryption step by step see:
            https://www.fastsitephp.com/en/documents/file-encryption-bash


*) File Encryption Shell File [encrypt.sh]
    - Automatically handle ".enc" extension if [-o] not specified?
        If using on Decrypt then the input file must end with ".enc"
    - File currently only works with Bash, create a Bourne Shell Versions
        that works with FreeBSD. To work with a default FreeBSD install
        Passwords won't be supported unless Python, etc are installed.
        [xxd] will also likely not be installed until other programs are
        so it would need to be replaced with FreeBSD hex dump tools.

*) FastSitePHP\Security\Crypto\JWT
    - Unit Test all misc errors that can be replicated, examples
      Currently all claim errors are validated and every error has been manually tested
        - Invalid Token format on decode
        - Invalid Key and Algo
        - Can specific OpenSSL Errors using RSA keys be validated without [$is_valid = ($is_public || $is_private);]?
          If not add some comments on how to replicate detailed OpenSSL Errors

*) FastSitePHP\Security\Password
    - Add a [isStrong()] function
    - Expand on the [generate()] formula and provide options
    - Unit Test the generated passwords for the actual rules
    - See comments in JS Code for Unit Test [hash-with-argon2]
        The test should be slightly revised to handle all servers (different memory, threads, etc)

*) FastSitePHP\Security\Web\Csrf*
    - Make error messages static variables so user can change if needed
    - Create Unit Test Files based on [testing-csrf.php] or other demo code

*) FastSitePHP\Media\Image
    - Create Unit Tests - use file [docs/scripts/testing-img.php] as a starting point
    - Consider using [exif_imagetype()] in future to determine file type instead of file ext
    - Once images are created for Unit Testing (JPG, PNG, etc) then update all demo code that
        uses [C:\Users\Public] images.

*) FastSitePHP\Encoding\Json
    Create Unit Tests for all errors from json_last_error_msg() if less than PHP 5.5
    as the function is polyfilled.
    This can be replicated on PHP 5.5+ using [json_encode(['test' => acos(8)]);]
    http://php.net/manual/en/function.json-last-error-msg.php

*) Unit Test [E_COMPILE_WARNING] in all versions of PHP7, need to determine how to trigger by searching [php-src]
    It failed on one computer in testing but works on most tested computers

*) Move some of the larger function comments to docs and link back.
    Example in [Application->setup()] [IP::cidr()]

*) Lang\I18N
    - Create unit tests, see [testing-i18n.php], also test Error: 'Invalid JSON File: ...'

*) Lang\L10N
    - Create Unit Tests, Plan on Testing Several Different Dates (AM, PM, Single-Digit Day/Month, etc)
      and Save expected results to JSON file for all Locales, then Unit Test will compare result of
      expected JSON with actual data. For now using [l10n-*-compare.php] files in [docs\scripts].
    - Add Date/Time Locale Calendar support for [ar-SA], [fa], and [fa-AF].
      See notes in [l10n-process-files.php]. These locales will need custom Calendar
      support and likely new calendar classes created.
    - Add Currency support
      JS has a 'currency' option when using [Intl.NumberFormat]
      This feature will likely take a lot of work and planning
    - Additional getter/setter function(s) to override default locale formatting options.
      If supported it should validate that a defined format (example 'Y-m-d') is valid.
      If should also set the selected [locale = null].
    - Add a function or functions to convert a locale to language/country
        Example: 'en-US' = 'English / United States'
        Will likely need to add a [countries.json] or [regions.json] file for this
    - Related to the above:
        [Languages.json] is only in English, consider making a [Languages] folder and then
        have languages properly translated so [Languages.json] would end up [en.json].
        Or having at least [displayName] and [englishName] versions since every having every
        language name translated to every language may not be practical (and creates large files).
        See script [l10n-process-files.php] as data needs to come from [unicode-cldr]

*) Lang\Time
    - Add Support for additional languages
        public static function secondsToText($seconds, $locale = 'en')
      Then add additional language functions

*) New Class - Lang\PluralRules
    - See:
        https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/PluralRules
        https://formatjs.io/guides/message-syntax/
        http://userguide.icu-project.org/formatparse/messages

*) Data\Validator Class
    - Translations files for [errorText] based on user's locale
    - Add support for <input type="color">
      https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/color

*) Net\HttpClient
    - Create unit tests, see [testing-http.php]
    - Add friendly error validation for developers if the function is called with invalid options
    - Page and docs on how to update, to be based on Stripe (MIT License)
        https://github.com/stripe/stripe-php/blob/master/update_certs.php
    - Additional options:
        - query = array - Build before calling [curl_init], need to use regex to determine how to add to the URL
    - Support different auth header options (basic, digest, etc)
        CURLOPT_USERNAME / CURLOPT_USERPWD with CURLAUTH_BASIC, CURLAUTH_DIGEST, etc
        CURLOPT_XOAUTH2_BEARER  - Specifies the OAuth 2.0 access token. (Added in cURL 7.33.0. Available since PHP 7.0.7.)
        Currently Basic Auth is supported if using format: 'https://{user}:{password}@url...'
        - Working example with Shopify and current code (1 line of code to call):
            $res = HttpClient::get('https://{user}:{password}@{shop}.myshopify.com/admin/products.json?handle={product}');
        - Would need to test the different options against real and widely used API's to make sure it works well
    - Cookie Support?
        CURLOPT_COOKIESESSION / CURLOPT_COOKIEJAR / CURLOPT_COOKIEFILE / CURLOPT_COOKIE
    - Redirect Options:
        CURLOPT_FOLLOWLOCATION / CURLOPT_MAXREDIRS
    - Option to force specific HTTP and TLS Versions
        CURLOPT_SSLVERSION / CURLOPT_HTTP_VERSION
    - For HTTP using php/stream - use [fopen] instead of [file_get_contents] so files
        can be saved. Currently the full response is read into memory
    - Proxy with CURLOPT_PROXY
    - Alternatively rather than making this class too large simply recommend Guzzle if additional features
      such as cookies are needed. Depends on how much code is needed for additional features. The HttpClient
      class must be kept small in order for easy security auditing and fast performance.
        http://docs.guzzlephp.org/en/stable/

*) Net\SmtpClient and Net\Email
    - Working example and documentation to allows someone to download
        only 3 files (SmtpClient.php, Email.php, index.php) so that Admins or anyone
        can use a single script to easily test SMTP in their environment.
        Docs will need to include links of how to quickly install PHP in various
        OS's as well.
    - More Unit Testing
       - Email - Validate Error Messages
       - Email - Validate How Getter Functions work (Example Address returned but not UserName for an Email)
       - SMTP - Custom Test Page with Config or just use demos for testing?
    - Build a Mock SMTP Server for Unit Testing Timeouts and general testing
    - Add support for DomainKeys Identified Mail (DKIM)
        This will take a while and will likely go in a separate class
    - Support [AUTH CRAM-MD5] if any widely used SMTP servers still support it
        It seems primarily used with port 25 before TLS was used for security.
        Seems to be poorly supported now as secure ports now exist.
    - Possibly add a [altBody(text)] for when [isHtml(true)]
        Ideally some recent stats on text based html clients and usage along
        with percentage of emails that go out like this would be looked up
        before adding this.
    - Rather than attach files in memory the code could be updated to stream
      read to the server. To do this the size would need to be read from the file
      and base64 estimated then used to compare to SIZE

*) Security\Web\RateLimit
    - Create Unit Tests and Demos - This will likely take a lot of time
    - There are many variations on the Token Bucket Algorithm.
      Consider other versions or adding options as the one used currently
      can allow for the requests to exceed the max in a given time frame.
    - Add support for additional Algorithms, example:
        https://en.wikipedia.org/wiki/Leaky_bucket
      An example of a major site that uses the Leaky bucket for API rate limiting is Shopify:
        https://help.shopify.com/en/api/reference/rest-admin-api-rate-limits
    - See file [scripts\testing-ratelimit.php]

*) Basic FreeBSD Doc with min requirements:
	- Doc here, using this almost all Unit Tests pass:
        https://www.fastsitephp.com/en/documents/install-php-on-linux
    - Currently 2 fail due to DNS not working
        http://{host}/tests/test-net-smtp.php/connect-to-gmail
        http://{host}/tests/test-net-config.php/network-ip
    - What is needed to allow PHP to use DNS on FreeBSD?

*) Add documentation regarding errors that cannot be unit tested but are in place for safety
   This includes at least 4 errors with text "This error can only happen when invalid changes are made this class."
   from the Encryption class.

*) Refactor Unit Test Code for [checkObjectProperties()] - too many parameters for clarity
    - Create a new function or class to handle this. Possibly have it return a JSON object with a list
    of all properties with defaults, functions by visibility, and then just accept a list of getter
    functions to call. See unit test route ['/default-settings-encryption'] as a starting example
    of getter functions and related JS code.

*) Remove [use ($app)] when routes are defined where it is not needed. Many Unit Test
    or Demo Routes will have it and not need it.

*) Quick Reference Demo Page [app_data\sample-code\home-page-en-examples.php]
    - Add a section for clickable keywords to filter down to common things [Database, email, etc]
        This will be done in JS and requires adding attributes to the code examples.
        The UI should look nice and likely only show on desktop layout so it doesn't take up
        to much space on mobile.
    - Render to an HTML Template instead of Text or JSON Response for many routes
      Example a table to show different variables and data type
          <tr><td>Field</td><td>Type</td><td><pre>Value</pre></td></tr>
    - Originally the following items were used:
            // Example Usage in a PHP/HTML Template File
            /*
            <link href="<?= $app->rootDir() ?>css/site.css" rel="stylesheet" />
            <a href="<?= $app->rootUrl() ?>/documents">Documents</a>
            */
        Replaced with:
            // Example usage for building URL's:
            $site_css = $app->rootDir() . 'css/site.css';
            $docs_link = $app->rootUrl() . '/documents';
            //
            // <link href="{{ $site_css }}" rel="stylesheet" />
            // <a href="{{ $docs_link }}">Documents</a>
        And both CSRF examples:
            /*
            <meta name="X-CSRF-Token" content="<?= $csrf_token ?>">
            <input name="X-CSRF-Token" value="<?= $csrf_token ?>">
            */
        Replaced with:
            //
            // <meta name="X-CSRF-Token" content="{{ $csrf_token }}">
            // <input name="X-CSRF-Token" value="{{ $csrf_token }}">
        This is because an update to Prism caused the syntax highlighting to break when including PHP
        template syntax in the comments. Using // causes a syntax error however when using /* */
        PHP doesn't render the tags. Ideally prism would be corrected and the original PHP code
        would be displayed

*) Update quick-reference page on the main site to add attributes for API and example links, etc
    The page may also allow for code snippets without "title:" to not appear
    in Quick Ref but be used elsewhere - intended for Class Demos once API docs
    are being setup.

*) Create a Quick Reference Page or Documentation showing how to use Monolog with FastSitePHP
     https://github.com/Seldaek/monolog

*) Create Documentation and Examples of how to use Symfony Request and Response with
    the FastSitePHP Application Object. Basically they work out of the box and the
    Symfony Response object can be returned on a route

*) Html Logger Template - Make it look nice, example more colors or images based on error type

*) Improve formatting and comments on API Docs, possibly use Markdown in PHP DocBlock comments
    Use consistent spacing for indents in PHP DocBlocks - 4 Spaces instead of 2

*) Add Specific API Examples for the following (but do not show in Quick Ref):
        http://localhost:3000/FastSitePHP/website/public/en/api/Data_OdbcDatabase
        http://localhost:3000/FastSitePHP/website/public/en/api/Data_Db2Database
        http://localhost:3000/FastSitePHP/website/public/en/api/Data_KeyValue_SqliteStorage
        http://localhost:3000/FastSitePHP/website/public/en/api/Security_Crypto_Encryption
        http://localhost:3000/FastSitePHP/website/public/en/api/Security_Crypto_FileEncryption
        http://localhost:3000/FastSitePHP/website/public/en/api/Lang_Time
    Basically all classes should have example code on the API docs but not all classes
    need to show in the quick ref section.

*) API Class Pages - Display comments for named function parameters or merge the
    comments with the main function comments? If displaying on the API page then
    the comments will need to be cleaned up.

    An example would be in [Response->cookie()]

*) API Index Page, allow for a more complex filter such as option to filter just methods/properties
    or full class text as is currently done, show counts of filtered properties and methods, etc

*) Allow for Language Translations of all Exception Messages. One possible option:
    - JSON files for each language, example: [Lang/I18N/errors.en.js]
    - Instead of
        $error = sprintf($long_text, ...)
        throw new \Exception($error)
    - Use something like this:
        $GLOBALS['error_content'] = [key=>value]
        throw new \Exception('ERR_CLASS_UNIQUE_KEY');
    - The Application Error Code can then show on of the following:
        1) If language selected and JSON file found show the message and
            use simple {var} replacement for the context
        2) No JSON file then just show ERR_CLASS_UNIQUE_KEY
    - AppMin would not use the language files and just show something like this:
        'ERR_CLASS_UNIQUE_KEY: ' . json_encode($GLOBALS['error_content'])

*) Test with other Web Servers and provide setup docs
    https://caddyserver.com/
    https://www.lighttpd.net/
