
# ------------------------------------------------------------------------------------
#
#   This document lists the commands with comments for setup of the main web server.
#   This commands can be ran from a web based terminal such as AWS Lightsail.
#
#   These instructions assume the Linux OS: Ubuntu 18.04 LTS
#
# ------------------------------------------------------------------------------------

# ------------------------------------------
# New Easy Setup
# ------------------------------------------

# After FastSitePHP was released a bash script [create-fast-site.sh] was created to allow
# for easy server setup of either Apache or nginx, PHP, and FastSitePHP with the Starter Site.
# Additionally another script was created [sync-server-from-github.sh] which allows the
# main site to be synced to all content published to GitHub.

# The combination of download and running these two scripts on a default OS are enough to
# setup the site now. This does not include the [.env] file or HTTPS setup though which
# are described in the detail setup.

# The new setup works with either Apache or nginx (Web Server choice is chosen in a
# selection from [create-fast-site.sh]).

# 1) Download and run the Bash Script to setup the Web Server with the Start Site
wget https://www.fastsitephp.com/downloads/create-fast-site.sh
sudo bash create-fast-site.sh

# 2) Download the Sync Server Script from GitHub and run it
wget https://raw.githubusercontent.com/fastsitephp/fastsitephp/master/scripts/sync-server-from-github.sh
bash sync-server-from-github.sh

# 3) Delete downloaded scripts
rm *.sh

# Normally this file is used to sync the server and now it will be Installed so
# if you run it then no files will be changed because the server is up to date.
bash /var/www/scripts/sync-server-from-github.sh

# Optional Unit Testing
# This will test the Framework from the server that you are running on.
# Unit tests are designed to be tested directly on a web server.
# All or most tests should succeed. For example Apache and IIS allow for
# Strong etags but nginx does not so a few tests are expected fail for nginx.
wget https://github.com/fastsitephp/fastsitephp/archive/master.zip
unzip master.zip
cp -r ~/fastsitephp-master/tests /var/www/html/tests

# Run and Verify all Unit Tests
#     http://{host}/tests/index.htm
#
# To run all tests edit the HTML file and 
# set all values to true:
#   runTimeConsumingTasks = true
#   runTestsWithRSA = true
#   etc
# sudo nano /var/www/html/tests/index.htm
#
# Delete Unit Tests and downloaded files after running
sudo rm -R /var/www/html/tests
sudo rm -R ~/fastsitephp-master
rm master.zip

# ------------------------------------------
# Original Commands used for Manual Setup
# ------------------------------------------

# Update [apt] Package Manager
# The [upgrade] is not required but recommended (however, it takes many minutes)
sudo apt update
sudo apt upgrade

# Install Apache and PHP
sudo apt install apache2
sudo apt install php

# Enable PHP for Apache
sudo apt install libapache2-mod-php

# Add PHP Extensions needed for all Unit Tests to succeed and Examples to work
sudo apt install php7.2-sqlite php7.2-gd php7.2-bc php7.2-simplexml php7.2-zip

# Enable a Fallback page so that [index.php]
# does not show in the URL.
sudo nano /etc/apache2/apache2.conf
# Scroll through the file and look for line:
#    <Directory /var/www/>
# Under it add the line:
#    FallbackResource /index.php
# Save using:
#    {control+s} -> {control+x}
#    or {control+x} -> {y} -> {enter}

# Enable Gzip Compression for JSON Responses
#   (This is not enabled by default on Apache)
sudo nano /etc/apache2/mods-available/deflate.conf
# Add the following under similar commands:
#       AddOutputFilterByType DEFLATE application/json

# Restart Apache
sudo service apache2 restart

# Set Permissions
# This assumes that the user [ubuntu] exists and
# is used to create and update files on the site.
sudo adduser ubuntu www-data
sudo chown ubuntu:www-data -R /var/www
sudo chmod 0775 -R /var/www

# Create and view a PHP test file
cd /var/www/html
echo "<?php phpinfo(); ?>" | sudo tee phpinfo.php
# http://your-server.example.com/phpinfo.php
# http://44.227.18.120/phpinfo.php

# Delete file [phpinfo.php] after checking server
sudo rm phpinfo.php

# Download Site Files
# Note - [index.php] comes from the [starter-site] repository, it varies
# slightly from the local development version in the main site.
#   https://github.com/fastsitephp/starter-site/blob/master/public/index.php
#   https://github.com/fastsitephp/fastsitephp/blob/master/website/public/index.php
cd ~
wget https://github.com/fastsitephp/fastsitephp/archive/master.zip
wget https://raw.githubusercontent.com/fastsitephp/starter-site/master/public/index.php
sudo apt install unzip
unzip master.zip
ls

# Copy Files (Overview)
fastsitephp\website\[app, app_data]
    -> Copy under [/var/www]
fastsitephp\website\public
    (all directories) and [robots.txt, favicon.ico, humans.txt, sitemap.xml]
    -> Copy under [/var/www/html]
starter-site\public\index.php
    -> Copy under [/var/www/html]
fastsitephp\tests
    -> Copy under [/var/www/html]
FastSitePHP\src
    -> Copy to [/var/www/vendor/fastsitephp]
Other Dependencies (PHP Logging and Markdown)
    -> Created by script [/var/www/scripts/install.php]
    
# Copy Files (Commands)
cp -r ~/fastsitephp-master/website/app /var/www/app
cp -r ~/fastsitephp-master/website/app_data /var/www/app_data
cp -r ~/fastsitephp-master/website/public/. /var/www/html
cp ~/index.php /var/www/html/index.php
cp -r ~/fastsitephp-master/scripts /var/www/scripts
cp -r ~/fastsitephp-master/tests /var/www/html/tests
mkdir /var/www/vendor
mkdir /var/www/vendor/fastsitephp
cp -r ~/fastsitephp-master/src /var/www/vendor/fastsitephp/src
ls /var/www
ls -la /var/www/html

# Install Dependencies (~20 - 40 kb) and create [vendor/autoload.php]
php /var/www/scripts/install.php

# Delete files that are not needed including the Apache default page
# The [.htaccess] file being deleted is a version for local development
# that is copied from the downloaded site (it's not needed for production).
sudo rm /var/www/html/.htaccess
sudo rm /var/www/html/Web.config
sudo rm /var/www/html/index.html

# Setup [.env] file which is used for the [/en/security-issue] page
sudo nano /var/www/app_data/.env

# Keys (copy from values local file)
SMTP_HOST={host}
SMTP_PORT={port}
SMTP_USER={email}
SMTP_PASSWORD={password}

# After copying files up, reset permissions
sudo chown ubuntu:www-data -R /var/www
sudo chmod 0775 -R /var/www

# Check the Site Home Page and verify that all main pages, examples, and docs works
# http://44.227.18.120/en/

# If there is a fatal error then use this to see the last apache error
tail -n 1 /var/log/apache2/error.log

# Make sure that sending an email works
# http://44.227.18.120/en/security-issue

# Run and Verify all Unit Tests
# http://44.227.18.120/tests/index.htm
# To run all tests edit the HTML file and 
# set all values to true:
#   runTimeConsumingTasks = true
#   runTestsWithRSA = true
#   etc
# sudo nano /var/www/html/tests/index.htm

# Delete Unit Tests are running them
sudo rm -R /var/www/html/tests
ls /var/www/html

# Restart the server and make sure everything works after a reboot
sudo reboot

# Additional Steps performed for the live site
https://www.fastsitephp.com/en/

# 1) Created Static IP in AWS Lightsail for the Sever: 44.227.18.120
# 2) GoDaddy - Used the IP for the Main A Record in Domain Settings
# 3) Update AWS to allow HTTPS in the Firewall on the Networking Tab
# 4) Installed HTTPS Certificate using certbot:
#    https://certbot.eff.org/lets-encrypt/ubuntubionic-apache
#    For the Certificate both non-www and www were entered:
#        fastsitephp.com www.fastsitephp.com

# Additionally a shell script is used to sync changes from GitHub back to the server
https://github.com/fastsitephp/fastsitephp/blob/master/scripts/sync-server-from-github.sh
